/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,10],$V2=[1,11],$V3=[1,12],$V4=[1,13],$V5=[1,14],$V6=[11,13,70,73],$V7=[5,14],$V8=[1,22],$V9=[2,83],$Va=[1,24],$Vb=[1,25],$Vc=[1,26],$Vd=[1,27],$Ve=[5,14,16],$Vf=[1,32],$Vg=[1,55],$Vh=[1,56],$Vi=[1,57],$Vj=[1,58],$Vk=[1,59],$Vl=[1,60],$Vm=[1,61],$Vn=[1,62],$Vo=[1,63],$Vp=[1,64],$Vq=[1,65],$Vr=[1,66],$Vs=[1,67],$Vt=[1,48],$Vu=[1,49],$Vv=[1,50],$Vw=[1,51],$Vx=[1,52],$Vy=[1,53],$Vz=[1,54],$VA=[1,71],$VB=[1,70],$VC=[5,13,14,16],$VD=[1,77],$VE=[1,79],$VF=[1,91],$VG=[1,93],$VH=[1,81],$VI=[1,82],$VJ=[1,83],$VK=[1,84],$VL=[1,85],$VM=[1,86],$VN=[1,87],$VO=[1,88],$VP=[1,89],$VQ=[1,90],$VR=[1,92],$VS=[1,94],$VT=[1,95],$VU=[5,13,14,16,43,69,70,74,88,89,90,91,92,93,94,95,97,98,99,100,101],$VV=[5,13,14,16,43,51,69,70,74,88,89,90,91,92,93,94,95,97,98,99,100,101],$VW=[2,120],$VX=[1,102],$VY=[1,101],$VZ=[1,146],$V_=[1,143],$V$=[1,144],$V01=[1,145],$V11=[1,147],$V21=[1,148],$V31=[1,131],$V41=[1,149],$V51=[1,150],$V61=[1,151],$V71=[13,16],$V81=[5,13,14,16,43,74,88,89,90,91,92],$V91=[5,13,14,16,43,69,70,74,88,89,90,91,92,97,98,99,100],$Va1=[5,11,28,29,30,36,39,40,42,45,46,47,49,51,55,56,57,58,59,60,61,63,64,65,66,67,68,79,80,81,82,83],$Vb1=[11,28,29,30,36,40,42,45,46,47,49,51,55,56,57,58,59,60,61,63,64,65,66,67,68,79,80,81,82,83],$Vc1=[5,13,14,16,43,74,90,91,92],$Vd1=[16,51],$Ve1=[42,45,51];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"ENTORNO_GLOBAL":4,"EOF":5,"DECLARACION_VARIABLE":6,"DECLARACION_FUNCIONES":7,"INICIAR_SISTEMA":8,"start":9,"with":10,"id":11,"(":12,")":13,";":14,"LISTA_VALORES":15,",":16,"EXPRESION":17,"TIPO_DATO":18,"PARAMETROS_FUNCION":19,"ENTORNO":20,"void":21,"INSTRUCCIONES":22,"INSTRUCCION":23,"ASIG_LIST":24,"FUNCIONES_CALL":25,"SENTENCIAS":26,"TRANSFERENCIA":27,"break":28,"return":29,"continue":30,"GENERARIF":31,"GENERARSWITCH":32,"GENERARWHILE":33,"GENERARFOR":34,"GENERARDOWHILE":35,"if":36,"GENERARELSE":37,"GENERARELSEIF":38,"else":39,"switch":40,"CASES_LIST":41,"case":42,":":43,"DEFAULT":44,"default":45,"while":46,"for":47,"ASIGNACION":48,"do":49,"{":50,"}":51,"FUNCIONES_NATIVAS":52,"FUNCIONES_DECLARADAS":53,"PARAMETROS_CALL":54,"append":55,"getValue":56,"setValue":57,"WriteLine":58,"toLower":59,"toUpper":60,"length":61,"VALORES":62,"truncate":63,"round":64,"typeof":65,"tostring":66,"toCharArray":67,"lista_dinamica":68,"<":69,">":70,"=":71,"CASTING":72,"[":73,"]":74,"new":75,"VALORES_LIST":76,"++":77,"--":78,"t_double":79,"t_char":80,"t_int":81,"t_string":82,"t_boolean":83,"EXPMAT":84,"EXPLOG":85,"EXPREL":86,"EXPTER":87,"+":88,"-":89,"/":90,"*":91,"ˆ":92,"%":93,"&&":94,"||":95,"!":96,"==":97,"!=":98,"<=":99,">=":100,"?":101,"char":102,"double":103,"int":104,"string":105,"boolean":106,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"start",10:"with",11:"id",12:"(",13:")",14:";",16:",",21:"void",28:"break",29:"return",30:"continue",36:"if",39:"else",40:"switch",42:"case",43:":",45:"default",46:"while",47:"for",49:"do",50:"{",51:"}",55:"append",56:"getValue",57:"setValue",58:"WriteLine",59:"toLower",60:"toUpper",61:"length",63:"truncate",64:"round",65:"typeof",66:"tostring",67:"toCharArray",68:"lista_dinamica",69:"<",70:">",71:"=",73:"[",74:"]",75:"new",77:"++",78:"--",79:"t_double",80:"t_char",81:"t_int",82:"t_string",83:"t_boolean",88:"+",89:"-",90:"/",91:"*",92:"ˆ",93:"%",94:"&&",95:"||",96:"!",97:"==",98:"!=",99:"<=",100:">=",101:"?",102:"char",103:"double",104:"int",105:"string",106:"boolean"},
productions_: [0,[3,2],[4,1],[4,1],[4,1],[8,6],[8,7],[15,3],[15,1],[7,6],[7,6],[7,5],[7,5],[19,4],[19,2],[22,2],[22,1],[23,2],[23,2],[23,2],[23,1],[23,1],[27,2],[27,3],[27,2],[27,2],[26,1],[26,1],[26,1],[26,1],[26,1],[31,5],[31,6],[31,6],[37,2],[38,2],[32,5],[41,5],[41,4],[44,3],[33,5],[34,9],[34,9],[35,7],[20,2],[20,3],[20,4],[20,3],[20,3],[25,1],[25,1],[53,5],[53,4],[54,3],[54,1],[52,6],[52,6],[52,8],[52,6],[52,6],[52,6],[52,5],[52,5],[52,5],[52,5],[52,5],[52,5],[6,2],[6,5],[24,3],[24,1],[48,3],[48,3],[48,3],[48,3],[48,7],[48,9],[48,7],[48,5],[48,6],[48,6],[48,2],[48,2],[48,1],[18,1],[18,1],[18,1],[18,1],[18,1],[17,1],[17,1],[17,1],[17,1],[17,3],[17,1],[84,3],[84,3],[84,3],[84,3],[84,3],[84,3],[84,2],[85,3],[85,3],[85,2],[86,3],[86,3],[86,3],[86,3],[86,3],[86,3],[87,5],[72,4],[76,3],[76,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        console.log('ANALISIS EXITOSO');
    
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:[1,9],18:6,21:[1,8],68:$V0,79:$V1,80:$V2,81:$V3,82:$V4,83:$V5},{1:[3]},{5:[1,15]},{5:[2,2]},{5:[2,3]},{5:[2,4]},{11:[1,17],24:16,48:18},{69:[1,19]},{11:[1,20]},{10:[1,21]},o($V6,[2,84]),o($V6,[2,85]),o($V6,[2,86]),o($V6,[2,87]),o($V6,[2,88]),{1:[2,1]},o($V7,[2,67],{16:$V8}),o([5,16],$V9,{12:[1,23],71:$Va,73:$Vb,77:$Vc,78:$Vd}),o($Ve,[2,70]),{18:28,79:$V1,80:$V2,81:$V3,82:$V4,83:$V5},{12:[1,29]},{11:[1,30]},{11:$Vf,48:31},{13:[1,34],18:35,19:33,79:$V1,80:$V2,81:$V3,82:$V4,83:$V5},{11:$Vg,12:[1,44],17:36,25:38,52:46,53:47,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,62:45,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,72:37,75:[1,39],84:40,85:41,86:42,87:43,89:$Vt,96:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz},{11:$VA,12:$VB,17:69,62:45,74:[1,68],84:40,85:41,86:42,87:43,89:$Vt,96:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz},o($VC,[2,81]),o($VC,[2,82]),{70:[1,72]},{13:[1,74],18:35,19:73,79:$V1,80:$V2,81:$V3,82:$V4,83:$V5},{12:[1,75]},o($Ve,[2,69]),o($VC,$V9,{71:$Va,73:$Vb,77:$Vc,78:$Vd}),{13:[1,76],16:$VD},{20:78,50:$VE},{11:[1,80]},o($VC,[2,71],{69:$VF,70:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT}),o($VC,[2,72]),o($VC,[2,73]),{68:[1,96]},o($VU,[2,89]),o($VU,[2,90]),o($VU,[2,91]),o($VU,[2,92]),{11:$VA,12:$VB,17:97,18:98,62:45,79:$V1,80:$V2,81:$V3,82:$V4,83:$V5,84:40,85:41,86:42,87:43,89:$Vt,96:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz},o($VU,[2,94]),o($VC,[2,49]),o($VC,[2,50]),{11:$VA,12:$VB,17:99,62:45,84:40,85:41,86:42,87:43,89:$Vt,96:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz},{11:$VA,12:$VB,17:100,62:45,84:40,85:41,86:42,87:43,89:$Vt,96:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz},o($VV,[2,115]),o($VV,[2,116]),o($VV,[2,117]),o($VV,[2,118]),o($VV,[2,119]),o([5,13,14,16,69,70,88,89,90,91,92,93,94,95,97,98,99,100,101],$VW,{12:$VX,73:$VY}),{12:[1,103]},{12:[1,104]},{12:[1,105]},{12:[1,106]},{12:[1,107]},{12:[1,108]},{12:[1,109]},{12:[1,110]},{12:[1,111]},{12:[1,112]},{12:[1,113]},{12:[1,114]},o($VC,[2,74],{71:[1,115]}),{69:$VF,70:$VG,74:[1,116],88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT},{11:$VA,12:$VB,17:97,62:45,84:40,85:41,86:42,87:43,89:$Vt,96:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz},o($VV,$VW,{73:$VY}),{11:$Vf,24:117,48:18},{13:[1,118],16:$VD},{20:119,50:$VE},{11:$VA,12:$VB,13:[1,120],15:121,17:122,62:45,84:40,85:41,86:42,87:43,89:$Vt,96:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz},{20:123,50:$VE},{18:124,79:$V1,80:$V2,81:$V3,82:$V4,83:$V5},{5:[2,12]},{6:132,11:$VZ,18:137,22:126,23:129,24:133,25:134,26:135,27:136,28:$V_,29:$V$,30:$V01,31:138,32:139,33:140,34:141,35:142,36:$V11,40:$V21,41:127,42:[1,130],44:128,45:$V31,46:$V41,47:$V51,48:18,49:$V61,51:[1,125],52:46,53:47,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$V0,79:$V1,80:$V2,81:$V3,82:$V4,83:$V5},o($V71,[2,14]),{11:$VA,12:$VB,17:152,62:45,84:40,85:41,86:42,87:43,89:$Vt,96:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz},{11:$VA,12:$VB,17:153,62:45,84:40,85:41,86:42,87:43,89:$Vt,96:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz},{11:$VA,12:$VB,17:154,62:45,84:40,85:41,86:42,87:43,89:$Vt,96:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz},{11:$VA,12:$VB,17:155,62:45,84:40,85:41,86:42,87:43,89:$Vt,96:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz},{11:$VA,12:$VB,17:156,62:45,84:40,85:41,86:42,87:43,89:$Vt,96:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz},{11:$VA,12:$VB,17:157,62:45,84:40,85:41,86:42,87:43,89:$Vt,96:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz},{11:$VA,12:$VB,17:158,62:45,84:40,85:41,86:42,87:43,89:$Vt,96:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz},{11:$VA,12:$VB,17:159,62:45,84:40,85:41,86:42,87:43,89:$Vt,96:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz},{11:$VA,12:$VB,17:160,62:45,84:40,85:41,86:42,87:43,89:$Vt,96:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz},{11:$VA,12:$VB,17:161,62:45,84:40,85:41,86:42,87:43,89:$Vt,96:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz},{11:$VA,12:$VB,17:162,62:45,84:40,85:41,86:42,87:43,89:$Vt,96:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz},{11:$VA,12:$VB,17:163,62:45,84:40,85:41,86:42,87:43,89:$Vt,96:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz},{11:$VA,12:$VB,17:164,62:45,84:40,85:41,86:42,87:43,89:$Vt,96:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz},{11:$VA,12:$VB,17:165,62:45,84:40,85:41,86:42,87:43,89:$Vt,96:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz},{11:$VA,12:$VB,17:166,62:45,84:40,85:41,86:42,87:43,89:$Vt,96:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz},{69:[1,167]},{13:[1,168],69:$VF,70:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT},{13:[1,169]},o($V81,[2,101],{69:$VF,70:$VG,93:$VM,94:$VN,95:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT}),o($V91,[2,104],{93:$VM,94:$VN,95:$VO,101:$VT}),{11:$VA,12:$VB,17:170,62:45,84:40,85:41,86:42,87:43,89:$Vt,96:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz},{11:[1,173],13:[1,172],54:171},{11:[1,174]},{11:[1,175]},{11:[1,176]},{11:[1,177]},{11:[1,178]},{11:[1,179]},{11:$VA,62:180,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz},{11:$VA,62:181,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz},{11:$VA,62:182,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz},{11:$VA,62:183,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz},{11:$VA,62:184,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz},{11:$VA,62:185,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz},{11:[1,189],25:188,50:[1,187],52:46,53:47,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,75:[1,186]},{71:[1,190]},o($V7,[2,68],{16:$V8}),{20:191,50:$VE},{5:[2,11]},{14:[1,192]},{13:[1,193],16:[1,194]},o($V71,[2,8],{69:$VF,70:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT}),{5:[2,9]},{11:[1,195]},o($Va1,[2,44]),{6:132,11:$VZ,18:137,23:197,24:133,25:134,26:135,27:136,28:$V_,29:$V$,30:$V01,31:138,32:139,33:140,34:141,35:142,36:$V11,40:$V21,46:$V41,47:$V51,48:18,49:$V61,51:[1,196],52:46,53:47,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$V0,79:$V1,80:$V2,81:$V3,82:$V4,83:$V5},{42:[1,200],44:198,45:$V31,51:[1,199]},{51:[1,201]},o($Vb1,[2,16]),{11:$VA,12:$VB,17:202,62:45,84:40,85:41,86:42,87:43,89:$Vt,96:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz},{43:[1,203]},{14:[1,204]},{14:[1,205],16:$V8},{14:[1,206]},o($Vb1,[2,20]),o($Vb1,[2,21]),{11:$Vf,24:16,48:18},o($Vb1,[2,26]),o($Vb1,[2,27]),o($Vb1,[2,28]),o($Vb1,[2,29]),o($Vb1,[2,30]),{14:[1,207]},{11:$VA,12:$VB,14:[1,209],17:208,62:45,84:40,85:41,86:42,87:43,89:$Vt,96:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz},{14:[1,210]},o([14,16],$V9,{12:$VX,71:$Va,73:$Vb,77:$Vc,78:$Vd}),{12:[1,211]},{12:[1,212]},{12:[1,213]},{12:[1,214]},{20:215,50:$VE},o($V81,[2,95],{69:$VF,70:$VG,93:$VM,94:$VN,95:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT}),o($V81,[2,96],{69:$VF,70:$VG,93:$VM,94:$VN,95:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT}),o($Vc1,[2,97],{69:$VF,70:$VG,88:$VH,89:$VI,93:$VM,94:$VN,95:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT}),o($Vc1,[2,98],{69:$VF,70:$VG,88:$VH,89:$VI,93:$VM,94:$VN,95:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT}),o([5,13,14,16,43,74],[2,99],{69:$VF,70:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,93:$VM,94:$VN,95:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT}),o([5,13,14,16,43,69,70,74,88,89,90,91,92,93,94,95,97,98,99,100],[2,100],{101:$VT}),o([5,13,14,16,43,69,70,74,88,89,90,91,92,94,97,98,99,100],[2,102],{93:$VM,95:$VO,101:$VT}),o([5,13,14,16,43,69,70,74,88,89,90,91,92,94,95,97,98,99,100],[2,103],{93:$VM,101:$VT}),o($V91,[2,105],{93:$VM,94:$VN,95:$VO,101:$VT}),o($V91,[2,106],{93:$VM,94:$VN,95:$VO,101:$VT}),o($V91,[2,107],{93:$VM,94:$VN,95:$VO,101:$VT}),o($V91,[2,108],{93:$VM,94:$VN,95:$VO,101:$VT}),o($V91,[2,109],{93:$VM,94:$VN,95:$VO,101:$VT}),o($V91,[2,110],{93:$VM,94:$VN,95:$VO,101:$VT}),{43:[1,216],69:$VF,70:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT},{18:217,79:$V1,80:$V2,81:$V3,82:$V4,83:$V5},o($VU,[2,93]),{11:$VA,12:$VB,17:218,62:45,84:40,85:41,86:42,87:43,89:$Vt,96:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz},{69:$VF,70:$VG,74:[1,219],88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT},{13:[1,220],16:[1,221]},{14:[1,222]},o($V71,[2,54]),{16:[1,223]},{16:[1,224]},{16:[1,225]},{16:[1,226]},{16:[1,227]},{16:[1,228]},{13:[1,229]},{13:[1,230]},{13:[1,231]},{13:[1,232]},{13:[1,233]},{13:[1,234]},{18:235,79:$V1,80:$V2,81:$V3,82:$V4,83:$V5},{11:$VA,62:237,76:236,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz},o($VC,[2,78]),{12:$VX},{11:$Vg,12:$VB,17:238,25:239,52:46,53:47,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,62:45,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,84:40,85:41,86:42,87:43,89:$Vt,96:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz},{5:[2,10]},{5:[2,5]},{14:[1,240]},{11:$VA,12:$VB,17:241,62:45,84:40,85:41,86:42,87:43,89:$Vt,96:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz},o($V71,[2,13]),o($Va1,[2,45]),o($Vb1,[2,15]),{51:[1,242]},o($Va1,[2,47]),{11:$VA,12:$VB,17:243,62:45,84:40,85:41,86:42,87:43,89:$Vt,96:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz},o($Va1,[2,48]),{43:[1,244],69:$VF,70:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT},{6:132,11:$VZ,18:137,22:245,23:129,24:133,25:134,26:135,27:136,28:$V_,29:$V$,30:$V01,31:138,32:139,33:140,34:141,35:142,36:$V11,40:$V21,46:$V41,47:$V51,48:18,49:$V61,52:46,53:47,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$V0,79:$V1,80:$V2,81:$V3,82:$V4,83:$V5},o($Vb1,[2,17]),o($Vb1,[2,18]),o($Vb1,[2,19]),o($Vb1,[2,22]),{14:[1,246],69:$VF,70:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT},o($Vb1,[2,24]),o($Vb1,[2,25]),{11:$VA,12:$VB,17:247,62:45,84:40,85:41,86:42,87:43,89:$Vt,96:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz},{11:$VA,12:$VB,17:248,62:45,84:40,85:41,86:42,87:43,89:$Vt,96:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz},{11:$VA,12:$VB,17:249,62:45,84:40,85:41,86:42,87:43,89:$Vt,96:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz},{6:250,11:$Vf,18:137,48:251,68:$V0,79:$V1,80:$V2,81:$V3,82:$V4,83:$V5},{46:[1,252]},{11:$VA,12:$VB,17:253,62:45,84:40,85:41,86:42,87:43,89:$Vt,96:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz},{70:[1,254]},o($VC,[2,112],{69:$VF,70:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT}),o($VV,[2,121]),{14:[1,255]},{11:[1,256]},o($VC,[2,52]),{11:$VA,12:$VB,17:257,62:45,84:40,85:41,86:42,87:43,89:$Vt,96:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz},{11:$VA,12:$VB,17:258,62:45,84:40,85:41,86:42,87:43,89:$Vt,96:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz},{11:$VA,12:$VB,17:259,62:45,84:40,85:41,86:42,87:43,89:$Vt,96:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz},{11:$VA,12:$VB,17:260,62:45,84:40,85:41,86:42,87:43,89:$Vt,96:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz},{11:$VA,12:$VB,17:261,62:45,84:40,85:41,86:42,87:43,89:$Vt,96:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz},{11:$VA,12:$VB,17:262,62:45,84:40,85:41,86:42,87:43,89:$Vt,96:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz},{14:[1,263]},{14:[1,264]},{14:[1,265]},{14:[1,266]},{14:[1,267]},{14:[1,268]},{73:[1,269]},{16:[1,271],51:[1,270]},o($Vd1,[2,114]),o($VC,[2,79],{69:$VF,70:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT}),o($VC,[2,80]),{5:[2,6]},o($V71,[2,7],{69:$VF,70:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT}),o($Va1,[2,46]),{43:[1,272],69:$VF,70:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT},{6:132,11:$VZ,18:137,22:273,23:129,24:133,25:134,26:135,27:136,28:$V_,29:$V$,30:$V01,31:138,32:139,33:140,34:141,35:142,36:$V11,40:$V21,46:$V41,47:$V51,48:18,49:$V61,52:46,53:47,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$V0,79:$V1,80:$V2,81:$V3,82:$V4,83:$V5},{6:132,11:$VZ,18:137,23:197,24:133,25:134,26:135,27:136,28:$V_,29:$V$,30:$V01,31:138,32:139,33:140,34:141,35:142,36:$V11,40:$V21,46:$V41,47:$V51,48:18,49:$V61,51:[2,39],52:46,53:47,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$V0,79:$V1,80:$V2,81:$V3,82:$V4,83:$V5},o($Vb1,[2,23]),{13:[1,274],69:$VF,70:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT},{13:[1,275],69:$VF,70:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT},{13:[1,276],69:$VF,70:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT},{14:[1,277]},{14:[1,278]},{12:[1,279]},o($VU,[2,111]),o($VC,[2,75]),o($VC,[2,51]),o($V71,[2,53]),{13:[1,280],69:$VF,70:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT},{13:[1,281],69:$VF,70:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT},{16:[1,282],69:$VF,70:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT},{13:[1,283],69:$VF,70:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT},{13:[1,284],69:$VF,70:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT},{13:[1,285],69:$VF,70:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT},o($VC,[2,61]),o($VC,[2,62]),o($VC,[2,63]),o($VC,[2,64]),o($VC,[2,65]),o($VC,[2,66]),{11:$VA,12:$VB,17:286,62:45,84:40,85:41,86:42,87:43,89:$Vt,96:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz},o($VC,[2,77]),{11:$VA,62:287,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz},{6:132,11:$VZ,18:137,22:288,23:129,24:133,25:134,26:135,27:136,28:$V_,29:$V$,30:$V01,31:138,32:139,33:140,34:141,35:142,36:$V11,40:$V21,46:$V41,47:$V51,48:18,49:$V61,52:46,53:47,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$V0,79:$V1,80:$V2,81:$V3,82:$V4,83:$V5},o($Ve1,[2,38],{48:18,52:46,53:47,6:132,24:133,25:134,26:135,27:136,18:137,31:138,32:139,33:140,34:141,35:142,23:197,11:$VZ,28:$V_,29:$V$,30:$V01,36:$V11,40:$V21,46:$V41,47:$V51,49:$V61,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$V0,79:$V1,80:$V2,81:$V3,82:$V4,83:$V5}),{20:289,50:$VE},{20:290,50:$VE},{20:291,50:$VE},{11:$VA,12:$VB,17:292,62:45,84:40,85:41,86:42,87:43,89:$Vt,96:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz},{11:$VA,12:$VB,17:293,62:45,84:40,85:41,86:42,87:43,89:$Vt,96:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz},{11:$VA,12:$VB,17:294,62:45,84:40,85:41,86:42,87:43,89:$Vt,96:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz},o($VC,[2,55]),o($VC,[2,56]),{11:$VA,12:$VB,17:295,62:45,84:40,85:41,86:42,87:43,89:$Vt,96:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz},o($VC,[2,58]),o($VC,[2,59]),o($VC,[2,60]),{69:$VF,70:$VG,74:[1,296],88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT},o($Vd1,[2,113]),o($Ve1,[2,37],{48:18,52:46,53:47,6:132,24:133,25:134,26:135,27:136,18:137,31:138,32:139,33:140,34:141,35:142,23:197,11:$VZ,28:$V_,29:$V$,30:$V01,36:$V11,40:$V21,46:$V41,47:$V51,49:$V61,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$V0,79:$V1,80:$V2,81:$V3,82:$V4,83:$V5}),o($Vb1,[2,31],{37:297,38:298,39:[1,299]}),o($Vb1,[2,36]),o($Vb1,[2,40]),{14:[1,300],69:$VF,70:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT},{14:[1,301],69:$VF,70:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT},{13:[1,302],69:$VF,70:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT},{13:[1,303],69:$VF,70:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT},o($VC,[2,76]),o($Vb1,[2,32]),o($Vb1,[2,33]),{20:304,31:305,36:$V11,50:$VE},{11:$Vf,48:306},{11:$Vf,48:307},{14:[1,308]},o($VC,[2,57]),o($Vb1,[2,34]),o($Vb1,[2,35]),{13:[1,309]},{13:[1,310]},o($Vb1,[2,43]),{20:311,50:$VE},{20:312,50:$VE},o($Vb1,[2,41]),o($Vb1,[2,42])],
defaultActions: {3:[2,2],4:[2,3],5:[2,4],15:[2,1],78:[2,12],119:[2,11],123:[2,9],191:[2,10],192:[2,5],240:[2,6]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


    console.log("SE COMPILO EL ARCHIVO .JISON");
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 75
break;
case 2:return 68
break;
case 3:return 55
break;
case 4:return 56
break;
case 5:return 57
break;
case 6:return 36
break;
case 7:return 39
break;
case 8:return 40
break;
case 9:return 42
break;
case 10:return 45
break;
case 11:return 46
break;
case 12:return 47
break;
case 13:return 49
break;
case 14:return 28
break;
case 15:return 30
break;
case 16:return 29
break;
case 17:return 21
break;
case 18:return 9
break;
case 19:return 10
break;
case 20:return 58 
break;
case 21:return 59
break;
case 22:return 60
break;
case 23:return 61
break;
case 24:return 63
break;
case 25:return 64 
break;
case 26:return 65
break;
case 27:return 66
break;
case 28:return 67
break;
case 29:return 82
break;
case 30:return 80
break;
case 31:return 81
break;
case 32:return 83
break;
case 33:return 79 
break;
case 34:return 77
break;
case 35:return 78
break;
case 36:return 88
break;
case 37:return 89
break;
case 38:return 91
break;
case 39:return 90
break;
case 40:return 92
break;
case 41:return 93
break;
case 42:return 69
break;
case 43:return 70
break;
case 44:return 99
break;
case 45:return 100
break;
case 46:return 97
break;
case 47:return 98
break;
case 48:return 71
break;
case 49:return 95
break;
case 50:return 94
break;
case 51:return 96
break;
case 52:return 43
break;
case 53:return 101
break;
case 54:return 14
break;
case 55:return 16
break;
case 56:return 71
break;
case 57:return 12
break;
case 58:return 13 
break;
case 59:return 50
break;
case 60:return 51
break;
case 61:return 73
break;
case 62:return 74
break;
case 63:return 102
break;
case 64:return 103
break;
case 65:return 104
break;
case 66:return 106
break;
case 67:return 105
break;
case 68:return 11
break;
case 69:return 5
break;
}
},
rules: [/^(?:\s+)/i,/^(?:new\b)/i,/^(?:DynamicList\b)/i,/^(?:append\b)/i,/^(?:getValue\b)/i,/^(?:setValue\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:start\b)/i,/^(?:with\b)/i,/^(?:WriteLine\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:toCharArray\b)/i,/^(?:string\b)/i,/^(?:char\b)/i,/^(?:int\b)/i,/^(?:boolean\b)/i,/^(?:double\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:ˆ)/i,/^(?:%)/i,/^(?:<)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?::)/i,/^(?:\?)/i,/^(?:;)/i,/^(?:,)/i,/^(?:=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:([\'][^\'\n][\']))/i,/^(?:(([0-9]+)\.([0-9]+)))/i,/^(?:([0-9]+))/i,/^(?:(true|false\b))/i,/^(?:([\"]([\\][\"]|[^\"])*[\"]))/i,/^(?:((([a-zA-ZÑñ]+)|(_([a-zA-ZÑñ]+))|(([a-zA-ZÑñ]+)_))(([a-zA-ZÑñ]+)|([0-9]+)|_)*))/i,/^(?:$)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}