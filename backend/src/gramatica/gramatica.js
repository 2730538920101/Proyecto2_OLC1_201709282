/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,9],$V2=[1,8],$V3=[1,11],$V4=[1,12],$V5=[1,13],$V6=[1,14],$V7=[1,15],$V8=[5,10,22,67,76,77,78,79,80],$V9=[12,14,69,72],$Va=[15,17,71,72],$Vb=[2,79],$Vc=[1,26],$Vd=[1,27],$Ve=[14,15],$Vf=[5,10,12,13,22,29,30,31,37,41,43,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,76,77,78,79,80,85,90,97,103,104,105,106,107],$Vg=[1,47],$Vh=[1,43],$Vi=[1,52],$Vj=[1,58],$Vk=[1,59],$Vl=[1,60],$Vm=[1,61],$Vn=[1,62],$Vo=[1,63],$Vp=[1,64],$Vq=[1,65],$Vr=[1,66],$Vs=[1,67],$Vt=[1,68],$Vu=[1,69],$Vv=[1,44],$Vw=[1,48],$Vx=[1,49],$Vy=[1,53],$Vz=[1,54],$VA=[1,55],$VB=[1,56],$VC=[1,57],$VD=[1,78],$VE=[1,80],$VF=[1,92],$VG=[1,94],$VH=[1,82],$VI=[1,83],$VJ=[1,84],$VK=[1,85],$VL=[1,86],$VM=[1,87],$VN=[1,88],$VO=[1,89],$VP=[1,90],$VQ=[1,91],$VR=[1,93],$VS=[1,95],$VT=[1,96],$VU=[14,15,17,44,68,69,73,89,90,91,92,93,94,95,96,98,99,100,101,102],$VV=[1,102],$VW=[14,15,17,44,51,68,69,73,89,90,91,92,93,94,95,96,98,99,100,101,102],$VX=[14,15,17,71,72],$VY=[1,122],$VZ=[1,143],$V_=[1,149],$V$=[1,150],$V01=[1,151],$V11=[1,152],$V21=[1,153],$V31=[1,136],$V41=[1,154],$V51=[1,155],$V61=[1,156],$V71=[14,17],$V81=[14,15,17,44,73,89,90,91,92,93],$V91=[14,15,17,44,68,69,73,89,90,91,92,93,98,99,100,101],$Va1=[17,51],$Vb1=[5,10,12,22,29,30,31,37,40,41,43,46,47,48,49,51,55,56,57,58,59,60,61,62,63,64,65,66,67,76,77,78,79,80],$Vc1=[12,29,30,31,37,41,43,46,47,48,49,51,55,56,57,58,59,60,61,62,63,64,65,66,67,76,77,78,79,80],$Vd1=[14,15,17,44,73,91,92,93],$Ve1=[43,46,51];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"ENTORNO_GLOBAL":4,"EOF":5,"GLOBAL":6,"DECLARACION_VARIABLE":7,"DECLARACION_FUNCIONES":8,"INICIAR_SISTEMA":9,"start":10,"with":11,"id":12,"(":13,")":14,";":15,"LISTA_VALORES":16,",":17,"EXPRESION":18,"TIPO_DATO":19,"PARAMETROS_FUNCION":20,"ENTORNO":21,"void":22,"INSTRUCCIONES":23,"INSTRUCCION":24,"ASIGNACION":25,"FUNCIONES_CALL":26,"SENTENCIAS":27,"TRANSFERENCIA":28,"break":29,"return":30,"continue":31,"GENERARIF":32,"GENERARSWITCH":33,"GENERARWHILE":34,"GENERARFOR":35,"GENERARDOWHILE":36,"if":37,"GENERARELSE":38,"GENERARELSEIF":39,"else":40,"switch":41,"CASES_LIST":42,"case":43,":":44,"DEFAULT":45,"default":46,"while":47,"for":48,"do":49,"{":50,"}":51,"FUNCIONES_NATIVAS":52,"FUNCIONES_DECLARADAS":53,"PARAMETROS_CALL":54,"append":55,"getValue":56,"setValue":57,"WriteLine":58,"toLower":59,"toUpper":60,"length":61,"truncate":62,"round":63,"typeof":64,"tostring":65,"toCharArray":66,"lista_dinamica":67,"<":68,">":69,"LISTA_ID":70,"=":71,"[":72,"]":73,"++":74,"--":75,"t_double":76,"t_char":77,"t_int":78,"t_string":79,"t_boolean":80,"EXPMAT":81,"EXPLOG":82,"EXPREL":83,"EXPTER":84,"new":85,"ARRAY":86,"VALORES":87,"VALORES_LIST":88,"+":89,"-":90,"/":91,"*":92,"ˆ":93,"%":94,"&&":95,"||":96,"!":97,"==":98,"!=":99,"<=":100,">=":101,"?":102,"char":103,"double":104,"int":105,"string":106,"boolean":107,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"start",11:"with",12:"id",13:"(",14:")",15:";",17:",",22:"void",29:"break",30:"return",31:"continue",37:"if",40:"else",41:"switch",43:"case",44:":",46:"default",47:"while",48:"for",49:"do",50:"{",51:"}",55:"append",56:"getValue",57:"setValue",58:"WriteLine",59:"toLower",60:"toUpper",61:"length",62:"truncate",63:"round",64:"typeof",65:"tostring",66:"toCharArray",67:"lista_dinamica",68:"<",69:">",71:"=",72:"[",73:"]",74:"++",75:"--",76:"t_double",77:"t_char",78:"t_int",79:"t_string",80:"t_boolean",85:"new",89:"+",90:"-",91:"/",92:"*",93:"ˆ",94:"%",95:"&&",96:"||",97:"!",98:"==",99:"!=",100:"<=",101:">=",102:"?",103:"char",104:"double",105:"int",106:"string",107:"boolean"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[9,6],[9,7],[16,3],[16,1],[8,6],[8,6],[8,5],[8,5],[20,4],[20,2],[23,2],[23,1],[24,1],[24,2],[24,2],[24,1],[24,2],[28,1],[28,2],[28,1],[28,1],[27,1],[27,1],[27,1],[27,1],[27,1],[32,5],[32,6],[32,6],[38,2],[39,2],[33,5],[42,5],[42,4],[45,3],[34,5],[35,8],[35,9],[36,7],[21,2],[21,3],[21,4],[21,3],[21,3],[26,1],[26,1],[53,4],[53,3],[54,3],[54,1],[52,6],[52,6],[52,8],[52,4],[52,6],[52,6],[52,4],[52,4],[52,4],[52,4],[52,4],[52,4],[7,3],[7,6],[25,3],[25,5],[25,6],[25,3],[25,1],[25,2],[25,2],[70,3],[70,1],[19,1],[19,1],[19,1],[19,1],[19,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,4],[18,3],[18,5],[18,1],[18,1],[18,1],[86,3],[86,5],[86,4],[81,3],[81,3],[81,3],[81,3],[81,3],[81,3],[81,2],[82,3],[82,3],[82,2],[83,3],[83,3],[83,3],[83,3],[83,3],[83,3],[84,5],[88,3],[88,1],[87,1],[87,1],[87,1],[87,1],[87,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        console.log('ANALISIS EXITOSO');
        return $$[$0-1];
    
break;
case 2: case 17:

        $$[$0-1].push($$[$0]);
        this.$ = $$[$0-1];
    
break;
case 3:

        this.$=[$$[$0]];
    
break;
case 4: case 5:

        this.$=$$[$0];
    
break;
case 6:

        this.$=$$[$0]
    
break;
case 9: case 78:

        $$[$0-2].push($$[$0]);
        this.$ = $$[$0-2];
    
break;
case 10: case 18: case 79:

        this.$ = [$$[$0]];
    
break;
case 19: case 22: case 28: case 29: case 30: case 31: case 32: case 51: case 52:

        this.$ = $$[$0];
    
break;
case 20: case 21: case 23:

        this.$ = $$[$0-1];
    
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:$V0,19:7,22:$V1,67:$V2,76:$V3,77:$V4,78:$V5,79:$V6,80:$V7},{1:[3]},{5:[1,16],6:17,7:4,8:5,9:6,10:$V0,19:7,22:$V1,67:$V2,76:$V3,77:$V4,78:$V5,79:$V6,80:$V7},o($V8,[2,3]),o($V8,[2,4]),o($V8,[2,5]),o($V8,[2,6]),{12:[1,19],25:18,70:20},{68:[1,21]},{12:[1,22]},{11:[1,23]},o($V9,[2,80]),o($V9,[2,81]),o($V9,[2,82]),o($V9,[2,83]),o($V9,[2,84]),{1:[2,1]},o($V8,[2,2]),{15:[1,24]},o($Va,$Vb,{13:[1,25],74:$Vc,75:$Vd}),o($Ve,[2,75],{17:[1,30],71:[1,28],72:[1,29]}),{19:31,76:$V3,77:$V4,78:$V5,79:$V6,80:$V7},{13:[1,32]},{12:[1,33]},o($Vf,[2,69]),{14:[1,35],19:36,20:34,76:$V3,77:$V4,78:$V5,79:$V6,80:$V7},o($Ve,[2,76]),o($Ve,[2,77]),{12:$Vg,13:$Vh,18:37,26:42,50:$Vi,52:50,53:51,55:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,81:38,82:39,83:40,84:41,85:$Vv,86:45,87:46,90:$Vw,97:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC},{12:$Vg,13:$Vh,18:71,26:42,50:$Vi,52:50,53:51,55:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,73:[1,70],81:38,82:39,83:40,84:41,85:$Vv,86:45,87:46,90:$Vw,97:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC},{12:[1,72]},{69:[1,73]},{14:[1,75],19:36,20:74,76:$V3,77:$V4,78:$V5,79:$V6,80:$V7},{13:[1,76]},{14:[1,77],17:$VD},{21:79,50:$VE},{12:[1,81]},o($Ve,[2,71],{68:$VF,69:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,98:$VP,99:$VQ,100:$VR,101:$VS,102:$VT}),o($VU,[2,85]),o($VU,[2,86]),o($VU,[2,87]),o($VU,[2,88]),o($VU,[2,89]),{12:$Vg,13:$Vh,18:98,19:97,26:42,50:$Vi,52:50,53:51,55:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,76:$V3,77:$V4,78:$V5,79:$V6,80:$V7,81:38,82:39,83:40,84:41,85:$Vv,86:45,87:46,90:$Vw,97:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC},{19:100,67:[1,99],76:$V3,77:$V4,78:$V5,79:$V6,80:$V7},o($VU,[2,93]),o($VU,[2,94]),o($VU,[2,95],{13:$VV,72:[1,101]}),{12:$Vg,13:$Vh,18:103,26:42,50:$Vi,52:50,53:51,55:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,81:38,82:39,83:40,84:41,85:$Vv,86:45,87:46,90:$Vw,97:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC},{12:$Vg,13:$Vh,18:104,26:42,50:$Vi,52:50,53:51,55:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,81:38,82:39,83:40,84:41,85:$Vv,86:45,87:46,90:$Vw,97:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC},o($VU,[2,51]),o($VU,[2,52]),{87:106,88:105,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC},o($VW,[2,118]),o($VW,[2,119]),o($VW,[2,120]),o($VW,[2,121]),o($VW,[2,122]),{13:[1,107]},{13:[1,108]},{13:[1,109]},{13:[1,110]},{13:[1,111]},{13:[1,112]},{13:[1,113]},{13:[1,114]},{13:[1,115]},{13:[1,116]},{13:[1,117]},{13:[1,118]},o($Ve,[2,74],{71:[1,119]}),{68:$VF,69:$VG,73:[1,120],89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,98:$VP,99:$VQ,100:$VR,101:$VS,102:$VT},o($VX,[2,78]),{12:$VY,25:121,70:20},{14:[1,123],17:$VD},{21:124,50:$VE},{12:$Vg,13:$Vh,14:[1,125],16:126,18:127,26:42,50:$Vi,52:50,53:51,55:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,81:38,82:39,83:40,84:41,85:$Vv,86:45,87:46,90:$Vw,97:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC},{21:128,50:$VE},{19:129,76:$V3,77:$V4,78:$V5,79:$V6,80:$V7},o($V8,[2,14]),{7:137,12:$VZ,19:142,23:131,24:134,25:138,26:139,27:140,28:141,29:$V_,30:$V$,31:$V01,32:144,33:145,34:146,35:147,36:148,37:$V11,41:$V21,42:132,43:[1,135],45:133,46:$V31,47:$V41,48:$V51,49:$V61,51:[1,130],52:50,53:51,55:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$V2,70:20,76:$V3,77:$V4,78:$V5,79:$V6,80:$V7},o($V71,[2,16]),{12:$Vg,13:$Vh,18:157,26:42,50:$Vi,52:50,53:51,55:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,81:38,82:39,83:40,84:41,85:$Vv,86:45,87:46,90:$Vw,97:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC},{12:$Vg,13:$Vh,18:158,26:42,50:$Vi,52:50,53:51,55:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,81:38,82:39,83:40,84:41,85:$Vv,86:45,87:46,90:$Vw,97:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC},{12:$Vg,13:$Vh,18:159,26:42,50:$Vi,52:50,53:51,55:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,81:38,82:39,83:40,84:41,85:$Vv,86:45,87:46,90:$Vw,97:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC},{12:$Vg,13:$Vh,18:160,26:42,50:$Vi,52:50,53:51,55:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,81:38,82:39,83:40,84:41,85:$Vv,86:45,87:46,90:$Vw,97:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC},{12:$Vg,13:$Vh,18:161,26:42,50:$Vi,52:50,53:51,55:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,81:38,82:39,83:40,84:41,85:$Vv,86:45,87:46,90:$Vw,97:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC},{12:$Vg,13:$Vh,18:162,26:42,50:$Vi,52:50,53:51,55:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,81:38,82:39,83:40,84:41,85:$Vv,86:45,87:46,90:$Vw,97:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC},{12:$Vg,13:$Vh,18:163,26:42,50:$Vi,52:50,53:51,55:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,81:38,82:39,83:40,84:41,85:$Vv,86:45,87:46,90:$Vw,97:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC},{12:$Vg,13:$Vh,18:164,26:42,50:$Vi,52:50,53:51,55:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,81:38,82:39,83:40,84:41,85:$Vv,86:45,87:46,90:$Vw,97:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC},{12:$Vg,13:$Vh,18:165,26:42,50:$Vi,52:50,53:51,55:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,81:38,82:39,83:40,84:41,85:$Vv,86:45,87:46,90:$Vw,97:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC},{12:$Vg,13:$Vh,18:166,26:42,50:$Vi,52:50,53:51,55:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,81:38,82:39,83:40,84:41,85:$Vv,86:45,87:46,90:$Vw,97:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC},{12:$Vg,13:$Vh,18:167,26:42,50:$Vi,52:50,53:51,55:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,81:38,82:39,83:40,84:41,85:$Vv,86:45,87:46,90:$Vw,97:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC},{12:$Vg,13:$Vh,18:168,26:42,50:$Vi,52:50,53:51,55:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,81:38,82:39,83:40,84:41,85:$Vv,86:45,87:46,90:$Vw,97:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC},{12:$Vg,13:$Vh,18:169,26:42,50:$Vi,52:50,53:51,55:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,81:38,82:39,83:40,84:41,85:$Vv,86:45,87:46,90:$Vw,97:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC},{12:$Vg,13:$Vh,18:170,26:42,50:$Vi,52:50,53:51,55:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,81:38,82:39,83:40,84:41,85:$Vv,86:45,87:46,90:$Vw,97:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC},{12:$Vg,13:$Vh,18:171,26:42,50:$Vi,52:50,53:51,55:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,81:38,82:39,83:40,84:41,85:$Vv,86:45,87:46,90:$Vw,97:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC},{14:[1,172]},{14:[1,173],68:$VF,69:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,98:$VP,99:$VQ,100:$VR,101:$VS,102:$VT},{68:[1,174]},{72:[1,175]},{87:176,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC},{12:[1,179],14:[1,178],54:177},o($V81,[2,105],{68:$VF,69:$VG,94:$VM,95:$VN,96:$VO,98:$VP,99:$VQ,100:$VR,101:$VS,102:$VT}),o($V91,[2,108],{94:$VM,95:$VN,96:$VO,102:$VT}),{17:[1,181],51:[1,180]},o($Va1,[2,117]),{12:[1,182]},{12:[1,183]},{12:[1,184]},{12:$Vg,13:$Vh,18:185,26:42,50:$Vi,52:50,53:51,55:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,81:38,82:39,83:40,84:41,85:$Vv,86:45,87:46,90:$Vw,97:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC},{12:[1,186]},{12:[1,187]},{12:$Vg,13:$Vh,18:188,26:42,50:$Vi,52:50,53:51,55:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,81:38,82:39,83:40,84:41,85:$Vv,86:45,87:46,90:$Vw,97:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC},{12:$Vg,13:$Vh,18:189,26:42,50:$Vi,52:50,53:51,55:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,81:38,82:39,83:40,84:41,85:$Vv,86:45,87:46,90:$Vw,97:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC},{12:$Vg,13:$Vh,18:190,26:42,50:$Vi,52:50,53:51,55:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,81:38,82:39,83:40,84:41,85:$Vv,86:45,87:46,90:$Vw,97:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC},{12:$Vg,13:$Vh,18:191,26:42,50:$Vi,52:50,53:51,55:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,81:38,82:39,83:40,84:41,85:$Vv,86:45,87:46,90:$Vw,97:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC},{12:$Vg,13:$Vh,18:192,26:42,50:$Vi,52:50,53:51,55:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,81:38,82:39,83:40,84:41,85:$Vv,86:45,87:46,90:$Vw,97:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC},{12:$Vg,13:$Vh,18:193,26:42,50:$Vi,52:50,53:51,55:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,81:38,82:39,83:40,84:41,85:$Vv,86:45,87:46,90:$Vw,97:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC},{12:$Vg,13:$Vh,18:194,26:42,50:$Vi,52:50,53:51,55:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,81:38,82:39,83:40,84:41,85:$Vv,86:45,87:46,90:$Vw,97:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC},{71:[1,195]},{15:[1,196]},o($VX,$Vb,{74:$Vc,75:$Vd}),{21:197,50:$VE},o($V8,[2,13]),{15:[1,198]},{14:[1,199],17:[1,200]},o($V71,[2,10],{68:$VF,69:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,98:$VP,99:$VQ,100:$VR,101:$VS,102:$VT}),o($V8,[2,11]),{12:[1,201]},o($Vb1,[2,46]),{7:137,12:$VZ,19:142,24:203,25:138,26:139,27:140,28:141,29:$V_,30:$V$,31:$V01,32:144,33:145,34:146,35:147,36:148,37:$V11,41:$V21,47:$V41,48:$V51,49:$V61,51:[1,202],52:50,53:51,55:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$V2,70:20,76:$V3,77:$V4,78:$V5,79:$V6,80:$V7},{43:[1,206],45:204,46:$V31,51:[1,205]},{51:[1,207]},o($Vc1,[2,18]),{12:$Vg,13:$Vh,18:208,26:42,50:$Vi,52:50,53:51,55:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,81:38,82:39,83:40,84:41,85:$Vv,86:45,87:46,90:$Vw,97:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC},{44:[1,209]},o($Vc1,[2,19]),{15:[1,210]},{15:[1,211]},o($Vc1,[2,22]),{15:[1,212]},{12:$VY,25:18,70:20},o($Va,$Vb,{13:$VV,74:$Vc,75:$Vd}),o($Vc1,[2,28]),o($Vc1,[2,29]),o($Vc1,[2,30]),o($Vc1,[2,31]),o($Vc1,[2,32]),{15:[2,24]},{12:$Vg,13:$Vh,15:[2,26],18:213,26:42,50:$Vi,52:50,53:51,55:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,81:38,82:39,83:40,84:41,85:$Vv,86:45,87:46,90:$Vw,97:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC},{15:[2,27]},{13:[1,214]},{13:[1,215]},{13:[1,216]},{13:[1,217]},{21:218,50:$VE},o($V81,[2,99],{68:$VF,69:$VG,94:$VM,95:$VN,96:$VO,98:$VP,99:$VQ,100:$VR,101:$VS,102:$VT}),o($V81,[2,100],{68:$VF,69:$VG,94:$VM,95:$VN,96:$VO,98:$VP,99:$VQ,100:$VR,101:$VS,102:$VT}),o($Vd1,[2,101],{68:$VF,69:$VG,89:$VH,90:$VI,94:$VM,95:$VN,96:$VO,98:$VP,99:$VQ,100:$VR,101:$VS,102:$VT}),o($Vd1,[2,102],{68:$VF,69:$VG,89:$VH,90:$VI,94:$VM,95:$VN,96:$VO,98:$VP,99:$VQ,100:$VR,101:$VS,102:$VT}),o([14,15,17,44,73],[2,103],{68:$VF,69:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,94:$VM,95:$VN,96:$VO,98:$VP,99:$VQ,100:$VR,101:$VS,102:$VT}),o([14,15,17,44,68,69,73,89,90,91,92,93,94,95,96,98,99,100,101],[2,104],{102:$VT}),o([14,15,17,44,68,69,73,89,90,91,92,93,95,98,99,100,101],[2,106],{94:$VM,96:$VO,102:$VT}),o([14,15,17,44,68,69,73,89,90,91,92,93,95,96,98,99,100,101],[2,107],{94:$VM,102:$VT}),o($V91,[2,109],{94:$VM,95:$VN,96:$VO,102:$VT}),o($V91,[2,110],{94:$VM,95:$VN,96:$VO,102:$VT}),o($V91,[2,111],{94:$VM,95:$VN,96:$VO,102:$VT}),o($V91,[2,112],{94:$VM,95:$VN,96:$VO,102:$VT}),o($V91,[2,113],{94:$VM,95:$VN,96:$VO,102:$VT}),o($V91,[2,114],{94:$VM,95:$VN,96:$VO,102:$VT}),{44:[1,219],68:$VF,69:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,98:$VP,99:$VQ,100:$VR,101:$VS,102:$VT},{12:$Vg,13:$Vh,18:220,26:42,50:$Vi,52:50,53:51,55:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,81:38,82:39,83:40,84:41,85:$Vv,86:45,87:46,90:$Vw,97:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC},o($VU,[2,91]),{19:221,76:$V3,77:$V4,78:$V5,79:$V6,80:$V7},{12:$Vg,13:$Vh,18:222,26:42,50:$Vi,52:50,53:51,55:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,81:38,82:39,83:40,84:41,85:$Vv,86:45,87:46,90:$Vw,97:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC},{73:[1,223]},{14:[1,224],17:[1,225]},o($VU,[2,54]),o($V71,[2,56]),o($VU,[2,96]),{87:226,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC},{17:[1,227]},{17:[1,228]},{17:[1,229]},{14:[1,230],68:$VF,69:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,98:$VP,99:$VQ,100:$VR,101:$VS,102:$VT},{17:[1,231]},{17:[1,232]},{14:[1,233],68:$VF,69:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,98:$VP,99:$VQ,100:$VR,101:$VS,102:$VT},{14:[1,234],68:$VF,69:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,98:$VP,99:$VQ,100:$VR,101:$VS,102:$VT},{14:[1,235],68:$VF,69:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,98:$VP,99:$VQ,100:$VR,101:$VS,102:$VT},{14:[1,236],68:$VF,69:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,98:$VP,99:$VQ,100:$VR,101:$VS,102:$VT},{14:[1,237],68:$VF,69:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,98:$VP,99:$VQ,100:$VR,101:$VS,102:$VT},{14:[1,238],68:$VF,69:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,98:$VP,99:$VQ,100:$VR,101:$VS,102:$VT},o($Ve,[2,72],{68:$VF,69:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,98:$VP,99:$VQ,100:$VR,101:$VS,102:$VT}),{12:$Vg,13:$Vh,18:239,26:42,50:$Vi,52:50,53:51,55:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,81:38,82:39,83:40,84:41,85:$Vv,86:45,87:46,90:$Vw,97:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC},o($Vf,[2,70]),o($V8,[2,12]),o($V8,[2,7]),{15:[1,240]},{12:$Vg,13:$Vh,18:241,26:42,50:$Vi,52:50,53:51,55:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,81:38,82:39,83:40,84:41,85:$Vv,86:45,87:46,90:$Vw,97:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC},o($V71,[2,15]),o($Vb1,[2,47]),o($Vc1,[2,17]),{51:[1,242]},o($Vb1,[2,49]),{12:$Vg,13:$Vh,18:243,26:42,50:$Vi,52:50,53:51,55:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,81:38,82:39,83:40,84:41,85:$Vv,86:45,87:46,90:$Vw,97:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC},o($Vb1,[2,50]),{44:[1,244],68:$VF,69:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,98:$VP,99:$VQ,100:$VR,101:$VS,102:$VT},{7:137,12:$VZ,19:142,23:245,24:134,25:138,26:139,27:140,28:141,29:$V_,30:$V$,31:$V01,32:144,33:145,34:146,35:147,36:148,37:$V11,41:$V21,47:$V41,48:$V51,49:$V61,52:50,53:51,55:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$V2,70:20,76:$V3,77:$V4,78:$V5,79:$V6,80:$V7},o($Vc1,[2,20]),o($Vc1,[2,21]),o($Vc1,[2,23]),{15:[2,25],68:$VF,69:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,98:$VP,99:$VQ,100:$VR,101:$VS,102:$VT},{12:$Vg,13:$Vh,18:246,26:42,50:$Vi,52:50,53:51,55:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,81:38,82:39,83:40,84:41,85:$Vv,86:45,87:46,90:$Vw,97:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC},{12:$Vg,13:$Vh,18:247,26:42,50:$Vi,52:50,53:51,55:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,81:38,82:39,83:40,84:41,85:$Vv,86:45,87:46,90:$Vw,97:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC},{12:$Vg,13:$Vh,18:248,26:42,50:$Vi,52:50,53:51,55:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,81:38,82:39,83:40,84:41,85:$Vv,86:45,87:46,90:$Vw,97:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC},{7:249,12:$VY,19:142,25:250,67:$V2,70:20,76:$V3,77:$V4,78:$V5,79:$V6,80:$V7},{47:[1,251]},{12:$Vg,13:$Vh,18:252,26:42,50:$Vi,52:50,53:51,55:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,81:38,82:39,83:40,84:41,85:$Vv,86:45,87:46,90:$Vw,97:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC},o($VU,[2,90]),{69:[1,253]},{68:$VF,69:$VG,73:[1,254],89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,98:$VP,99:$VQ,100:$VR,101:$VS,102:$VT},o($VU,[2,98]),o($VU,[2,53]),{12:[1,255]},o($Va1,[2,116]),{12:$Vg,13:$Vh,18:256,26:42,50:$Vi,52:50,53:51,55:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,81:38,82:39,83:40,84:41,85:$Vv,86:45,87:46,90:$Vw,97:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC},{12:$Vg,13:$Vh,18:257,26:42,50:$Vi,52:50,53:51,55:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,81:38,82:39,83:40,84:41,85:$Vv,86:45,87:46,90:$Vw,97:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC},{12:$Vg,13:$Vh,18:258,26:42,50:$Vi,52:50,53:51,55:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,81:38,82:39,83:40,84:41,85:$Vv,86:45,87:46,90:$Vw,97:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC},o($VU,[2,60]),{12:$Vg,13:$Vh,18:259,26:42,50:$Vi,52:50,53:51,55:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,81:38,82:39,83:40,84:41,85:$Vv,86:45,87:46,90:$Vw,97:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC},{12:$Vg,13:$Vh,18:260,26:42,50:$Vi,52:50,53:51,55:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,81:38,82:39,83:40,84:41,85:$Vv,86:45,87:46,90:$Vw,97:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC},o($VU,[2,63]),o($VU,[2,64]),o($VU,[2,65]),o($VU,[2,66]),o($VU,[2,67]),o($VU,[2,68]),o($Ve,[2,73],{68:$VF,69:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,98:$VP,99:$VQ,100:$VR,101:$VS,102:$VT}),o($V8,[2,8]),o($V71,[2,9],{68:$VF,69:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,98:$VP,99:$VQ,100:$VR,101:$VS,102:$VT}),o($Vb1,[2,48]),{44:[1,261],68:$VF,69:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,98:$VP,99:$VQ,100:$VR,101:$VS,102:$VT},{7:137,12:$VZ,19:142,23:262,24:134,25:138,26:139,27:140,28:141,29:$V_,30:$V$,31:$V01,32:144,33:145,34:146,35:147,36:148,37:$V11,41:$V21,47:$V41,48:$V51,49:$V61,52:50,53:51,55:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$V2,70:20,76:$V3,77:$V4,78:$V5,79:$V6,80:$V7},{7:137,12:$VZ,19:142,24:203,25:138,26:139,27:140,28:141,29:$V_,30:$V$,31:$V01,32:144,33:145,34:146,35:147,36:148,37:$V11,41:$V21,47:$V41,48:$V51,49:$V61,51:[2,41],52:50,53:51,55:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$V2,70:20,76:$V3,77:$V4,78:$V5,79:$V6,80:$V7},{14:[1,263],68:$VF,69:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,98:$VP,99:$VQ,100:$VR,101:$VS,102:$VT},{14:[1,264],68:$VF,69:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,98:$VP,99:$VQ,100:$VR,101:$VS,102:$VT},{14:[1,265],68:$VF,69:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,98:$VP,99:$VQ,100:$VR,101:$VS,102:$VT},{12:$Vg,13:$Vh,18:266,26:42,50:$Vi,52:50,53:51,55:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,81:38,82:39,83:40,84:41,85:$Vv,86:45,87:46,90:$Vw,97:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC},{15:[1,267]},{13:[1,268]},o($VU,[2,115]),o($VU,[2,92]),o($VU,[2,97]),o($V71,[2,55]),{14:[1,269],68:$VF,69:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,98:$VP,99:$VQ,100:$VR,101:$VS,102:$VT},{14:[1,270],68:$VF,69:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,98:$VP,99:$VQ,100:$VR,101:$VS,102:$VT},{17:[1,271],68:$VF,69:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,98:$VP,99:$VQ,100:$VR,101:$VS,102:$VT},{14:[1,272],68:$VF,69:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,98:$VP,99:$VQ,100:$VR,101:$VS,102:$VT},{14:[1,273],68:$VF,69:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,98:$VP,99:$VQ,100:$VR,101:$VS,102:$VT},{7:137,12:$VZ,19:142,23:274,24:134,25:138,26:139,27:140,28:141,29:$V_,30:$V$,31:$V01,32:144,33:145,34:146,35:147,36:148,37:$V11,41:$V21,47:$V41,48:$V51,49:$V61,52:50,53:51,55:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$V2,70:20,76:$V3,77:$V4,78:$V5,79:$V6,80:$V7},o($Ve1,[2,40],{70:20,52:50,53:51,7:137,25:138,26:139,27:140,28:141,19:142,32:144,33:145,34:146,35:147,36:148,24:203,12:$VZ,29:$V_,30:$V$,31:$V01,37:$V11,41:$V21,47:$V41,48:$V51,49:$V61,55:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$V2,76:$V3,77:$V4,78:$V5,79:$V6,80:$V7}),{21:275,50:$VE},{21:276,50:$VE},{21:277,50:$VE},{15:[1,278],68:$VF,69:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,98:$VP,99:$VQ,100:$VR,101:$VS,102:$VT},{12:$Vg,13:$Vh,18:279,26:42,50:$Vi,52:50,53:51,55:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,81:38,82:39,83:40,84:41,85:$Vv,86:45,87:46,90:$Vw,97:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC},{12:$Vg,13:$Vh,18:280,26:42,50:$Vi,52:50,53:51,55:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,81:38,82:39,83:40,84:41,85:$Vv,86:45,87:46,90:$Vw,97:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC},o($VU,[2,57]),o($VU,[2,58]),{12:$Vg,13:$Vh,18:281,26:42,50:$Vi,52:50,53:51,55:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,81:38,82:39,83:40,84:41,85:$Vv,86:45,87:46,90:$Vw,97:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC},o($VU,[2,61]),o($VU,[2,62]),o($Ve1,[2,39],{70:20,52:50,53:51,7:137,25:138,26:139,27:140,28:141,19:142,32:144,33:145,34:146,35:147,36:148,24:203,12:$VZ,29:$V_,30:$V$,31:$V01,37:$V11,41:$V21,47:$V41,48:$V51,49:$V61,55:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$V2,76:$V3,77:$V4,78:$V5,79:$V6,80:$V7}),o($Vc1,[2,33],{38:282,39:283,40:[1,284]}),o($Vc1,[2,38]),o($Vc1,[2,42]),{12:$VY,25:285,70:20},{15:[1,286],68:$VF,69:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,98:$VP,99:$VQ,100:$VR,101:$VS,102:$VT},{14:[1,287],68:$VF,69:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,98:$VP,99:$VQ,100:$VR,101:$VS,102:$VT},{14:[1,288],68:$VF,69:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,98:$VP,99:$VQ,100:$VR,101:$VS,102:$VT},o($Vc1,[2,34]),o($Vc1,[2,35]),{21:289,32:290,37:$V11,50:$VE},{14:[1,291]},{12:$VY,25:292,70:20},{15:[1,293]},o($VU,[2,59]),o($Vc1,[2,36]),o($Vc1,[2,37]),{21:294,50:$VE},{14:[1,295]},o($Vc1,[2,45]),o($Vc1,[2,43]),{21:296,50:$VE},o($Vc1,[2,44])],
defaultActions: {16:[2,1],149:[2,24],151:[2,27]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    console.log("SE COMPILO EL ARCHIVO .JISON");
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 85
break;
case 4:return 67
break;
case 5:return 55
break;
case 6:return 56
break;
case 7:return 57
break;
case 8:return 37
break;
case 9:return 40
break;
case 10:return 41
break;
case 11:return 43
break;
case 12:return 46
break;
case 13:return 47
break;
case 14:return 48
break;
case 15:return 49
break;
case 16:return 29
break;
case 17:return 31
break;
case 18:return 30
break;
case 19:return 22
break;
case 20:return 10
break;
case 21:return 11
break;
case 22:return 58 
break;
case 23:return 59
break;
case 24:return 60
break;
case 25:return 61
break;
case 26:return 62
break;
case 27:return 63 
break;
case 28:return 64
break;
case 29:return 65
break;
case 30:return 66
break;
case 31:return 79
break;
case 32:return 77
break;
case 33:return 78
break;
case 34:return 80
break;
case 35:return 76 
break;
case 36:return 74
break;
case 37:return 75
break;
case 38:return 89
break;
case 39:return 90
break;
case 40:return 92
break;
case 41:return 91
break;
case 42:return 93
break;
case 43:return 94
break;
case 44:return 68
break;
case 45:return 69
break;
case 46:return 100
break;
case 47:return 101
break;
case 48:return 98
break;
case 49:return 99
break;
case 50:return 71
break;
case 51:return 96
break;
case 52:return 95
break;
case 53:return 97
break;
case 54:return 44
break;
case 55:return 102
break;
case 56:return 15
break;
case 57:return 17
break;
case 58:return 71
break;
case 59:return 13
break;
case 60:return 14 
break;
case 61:return 50
break;
case 62:return 51
break;
case 63:return 72
break;
case 64:return 73
break;
case 65:return 103
break;
case 66:return 104
break;
case 67:return 105
break;
case 68:return 107
break;
case 69:return 106
break;
case 70:return 12
break;
case 71:return 5
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:new\b)/i,/^(?:DynamicList\b)/i,/^(?:append\b)/i,/^(?:getValue\b)/i,/^(?:setValue\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:start\b)/i,/^(?:with\b)/i,/^(?:WriteLine\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:toCharArray\b)/i,/^(?:string\b)/i,/^(?:char\b)/i,/^(?:int\b)/i,/^(?:boolean\b)/i,/^(?:double\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:ˆ)/i,/^(?:%)/i,/^(?:<)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?::)/i,/^(?:\?)/i,/^(?:;)/i,/^(?:,)/i,/^(?:=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:([\']([\\].|[^\'\n])[\']))/i,/^(?:(([0-9]+)\.([0-9]+)))/i,/^(?:([0-9]+))/i,/^(?:(true|false\b))/i,/^(?:([\"]([\\][\"]|[^\"])*[\"]))/i,/^(?:((([a-zA-ZÑñ]+)|(_([a-zA-ZÑñ]+))|(([a-zA-ZÑñ]+)_))(([a-zA-ZÑñ]+)|([0-9]+)|_)*))/i,/^(?:$)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}