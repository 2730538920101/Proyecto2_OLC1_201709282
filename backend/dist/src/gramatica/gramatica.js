/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,9],$V1=[1,8],$V2=[1,10],$V3=[1,11],$V4=[1,12],$V5=[1,13],$V6=[1,14],$V7=[1,15],$V8=[5,10,63,72,73,74,75,76,77],$V9=[12,14,65,68],$Va=[2,71],$Vb=[1,25],$Vc=[1,26],$Vd=[14,15],$Ve=[5,10,12,13,28,29,30,36,40,42,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,72,73,74,75,76,77,82,87,94,100,101,102,103,104],$Vf=[1,45],$Vg=[1,41],$Vh=[1,60],$Vi=[1,48],$Vj=[1,49],$Vk=[1,50],$Vl=[1,51],$Vm=[1,52],$Vn=[1,53],$Vo=[1,54],$Vp=[1,55],$Vq=[1,56],$Vr=[1,57],$Vs=[1,58],$Vt=[1,59],$Vu=[1,42],$Vv=[1,46],$Vw=[1,47],$Vx=[1,61],$Vy=[1,62],$Vz=[1,63],$VA=[1,64],$VB=[1,65],$VC=[1,74],$VD=[1,86],$VE=[1,88],$VF=[1,76],$VG=[1,77],$VH=[1,78],$VI=[1,79],$VJ=[1,80],$VK=[1,81],$VL=[1,82],$VM=[1,83],$VN=[1,84],$VO=[1,85],$VP=[1,87],$VQ=[1,89],$VR=[1,90],$VS=[14,15,17,43,64,65,69,86,87,88,89,90,91,92,93,95,96,97,98,99],$VT=[14,15,17,43,50,64,65,69,86,87,88,89,90,91,92,93,95,96,97,98,99],$VU=[14,15,17,67,68],$VV=[1,116],$VW=[1,140],$VX=[1,141],$VY=[1,142],$VZ=[1,143],$V_=[1,144],$V$=[1,128],$V01=[1,145],$V11=[1,146],$V21=[1,147],$V31=[14,17],$V41=[14,15,17,43,69,86,87,88,89,90],$V51=[14,15,17,43,64,65,69,86,87,88,89,90,95,96,97,98,99],$V61=[17,50],$V71=[1,189],$V81=[5,10,12,28,29,30,36,39,40,42,45,46,47,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,72,73,74,75,76,77],$V91=[12,28,29,30,36,40,42,45,46,47,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,72,73,74,75,76,77],$Va1=[14,15,17,43,69,88,89,90],$Vb1=[14,15,17,43,69],$Vc1=[42,45,50];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"ENTORNO_GLOBAL":4,"EOF":5,"GLOBAL":6,"DECLARACION_VARIABLE":7,"DECLARACION_FUNCIONES":8,"INICIAR_SISTEMA":9,"start":10,"with":11,"id":12,"(":13,")":14,";":15,"LISTA_VALORES":16,",":17,"EXPRESION":18,"TIPO_DATO":19,"PARAMETROS_FUNCION":20,"ENTORNO":21,"INSTRUCCIONES":22,"INSTRUCCION":23,"ASIGNACION":24,"FUNCIONES_CALL":25,"SENTENCIAS":26,"TRANSFERENCIA":27,"break":28,"return":29,"continue":30,"GENERARIF":31,"GENERARSWITCH":32,"GENERARWHILE":33,"GENERARFOR":34,"GENERARDOWHILE":35,"if":36,"GENERARELSE":37,"GENERARELSEIF":38,"else":39,"switch":40,"CASES_LIST":41,"case":42,":":43,"DEFAULT":44,"default":45,"while":46,"for":47,"do":48,"{":49,"}":50,"append":51,"setValue":52,"WriteLine":53,"getValue":54,"toLower":55,"toUpper":56,"length":57,"truncate":58,"round":59,"typeof":60,"tostring":61,"toCharArray":62,"lista_dinamica":63,"<":64,">":65,"LISTA_ID":66,"=":67,"[":68,"]":69,"++":70,"--":71,"t_double":72,"t_char":73,"t_int":74,"t_string":75,"t_boolean":76,"void":77,"EXPMAT":78,"EXPLOG":79,"EXPREL":80,"EXPTER":81,"new":82,"ARRAY":83,"VALORES":84,"VALORES_LIST":85,"+":86,"-":87,"/":88,"*":89,"ˆ":90,"%":91,"&&":92,"||":93,"!":94,"==":95,"!=":96,"<=":97,">=":98,"?":99,"int":100,"double":101,"boolean":102,"char":103,"string":104,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"start",11:"with",12:"id",13:"(",14:")",15:";",17:",",28:"break",29:"return",30:"continue",36:"if",39:"else",40:"switch",42:"case",43:":",45:"default",46:"while",47:"for",48:"do",49:"{",50:"}",51:"append",52:"setValue",53:"WriteLine",54:"getValue",55:"toLower",56:"toUpper",57:"length",58:"truncate",59:"round",60:"typeof",61:"tostring",62:"toCharArray",63:"lista_dinamica",64:"<",65:">",67:"=",68:"[",69:"]",70:"++",71:"--",72:"t_double",73:"t_char",74:"t_int",75:"t_string",76:"t_boolean",77:"void",82:"new",86:"+",87:"-",88:"/",89:"*",90:"ˆ",91:"%",92:"&&",93:"||",94:"!",95:"==",96:"!=",97:"<=",98:">=",99:"?",100:"int",101:"double",102:"boolean",103:"char",104:"string"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[9,6],[9,7],[16,3],[16,1],[8,6],[8,5],[20,4],[20,2],[22,2],[22,1],[23,1],[23,2],[23,2],[23,1],[23,2],[27,1],[27,2],[27,1],[27,1],[26,1],[26,1],[26,1],[26,1],[26,1],[31,5],[31,6],[31,6],[37,2],[38,2],[32,5],[41,5],[41,4],[44,3],[33,5],[34,8],[34,9],[35,7],[21,2],[21,3],[21,4],[21,3],[21,3],[25,4],[25,4],[25,4],[25,4],[25,4],[25,4],[25,4],[25,4],[25,4],[25,4],[25,4],[25,4],[7,3],[7,6],[24,3],[24,5],[24,6],[24,3],[24,1],[24,2],[24,2],[66,3],[66,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,4],[18,3],[18,5],[18,1],[18,1],[18,1],[18,4],[18,3],[83,3],[83,5],[83,4],[78,3],[78,3],[78,3],[78,3],[78,3],[78,3],[78,2],[79,3],[79,3],[79,2],[80,3],[80,3],[80,3],[80,3],[80,3],[80,3],[81,5],[85,3],[85,1],[84,1],[84,1],[84,1],[84,1],[84,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        console.log('ANALISIS EXITOSO');
        return $$[$0-1];
    
break;
case 2: case 15:

        $$[$0-1].push($$[$0]);
        this.$ = $$[$0-1];
    
break;
case 3:

        $$[$0]=[$$[$0]];
        this.$ = $$[$0];
    
break;
case 4:

        this.$=$$[$0];
    
break;
case 5:

        console.log($$[$0]);
        this.$=$$[$0];
    
break;
case 6:

        this.$=$$[$0]
    
break;
case 9: case 70: case 111:

        $$[$0-2].push($$[$0]);
        this.$ = $$[$0-2];
    
break;
case 10: case 16: case 38: case 71: case 112:

        this.$ = [$$[$0]];
    
break;
case 11:

        
        if($$[$0-5] == "int"){
            this.$ = new Function($$[$0-4], 0, $$[$0], $$[$0-2], _$[$0-5].first_line, _$[$0-5].first_column);
        }else if($$[$0-5] == "double"){
            this.$ = new Function($$[$0-4], 1, $$[$0], $$[$0-2], _$[$0-5].first_line, _$[$0-5].first_column);
        }else if($$[$0-5] == "boolean"){
            this.$ = new Function($$[$0-4], 2, $$[$0], $$[$0-2], _$[$0-5].first_line, _$[$0-5].first_column);
        }else if($$[$0-5] == "char"){
            this.$ = new Function($$[$0-4], 3, $$[$0], $$[$0-2], _$[$0-5].first_line, _$[$0-5].first_column);
        }else if($$[$0-5] == "string"){
            this.$ = new Function($$[$0-4], 4, $$[$0], $$[$0-2], _$[$0-5].first_line, _$[$0-5].first_column);
        }else if($$[$0-5] == "void"){
            this.$ = new Function($$[$0-4], 5, $$[$0], $$[$0-2], _$[$0-5].first_line, _$[$0-5].first_column);
        }    
        
    
break;
case 12:

        
        if($$[$0-4] == "int"){
            this.$ = new Function($$[$0-3], 0, $$[$0], [], _$[$0-4].first_line, _$[$0-4].first_column);
        }else if($$[$0-4] == "double"){
            this.$ = new Function($$[$0-3], 1, $$[$0], [], _$[$0-4].first_line, _$[$0-4].first_column);
        }else if($$[$0-4] == "boolean"){
            this.$ = new Function($$[$0-3], 2, $$[$0], [], _$[$0-4].first_line, _$[$0-4].first_column);
        }else if($$[$0-4] == "char"){
            this.$ = new Function($$[$0-3], 3, $$[$0], [], _$[$0-4].first_line, _$[$0-4].first_column);
        }else if($$[$0-4] == "string"){
            this.$ = new Function($$[$0-3], 4, $$[$0], [], _$[$0-4].first_line, _$[$0-4].first_column);
        }else if($$[$0-4] == "void"){
            this.$ = new Function($$[$0-3], 5, $$[$0], [], _$[$0-4].first_line, _$[$0-4].first_column);
        }    
    
break;
case 13:

        if($$[$0-1] == "int"){
            const parametro = new Params($$[$0], 0, _$[$0-3].first_line, _$[$0-3].first_column);
            $$[$0-3].push(parametro);
            this.$ = $$[$0-3];
        }else if($$[$0-1] == "double"){
            const parametro = new Params($$[$0], 1, _$[$0-3].first_line, _$[$0-3].first_column);
            $$[$0-3].push(parametro);
            this.$ = $$[$0-3];
        }else if($$[$0-1] == "boolean"){
            const parametro = new Params($$[$0], 2, _$[$0-3].first_line, _$[$0-3].first_column);
            $$[$0-3].push(parametro);
            this.$ = $$[$0-3];
        }else if($$[$0-1] == "char"){
            const parametro = new Params($$[$0], 3, _$[$0-3].first_line, _$[$0-3].first_column);
            $$[$0-3].push(parametro);
            this.$ = $$[$0-3];
        }else if($$[$0-1] == "string"){
            const parametro = new Params($$[$0], 4, _$[$0-3].first_line, _$[$0-3].first_column);
            this.$ = [parametro];
        }

    
break;
case 14:

        if($$[$0-1] == "int"){
            const parametro = new Params($$[$0], 0, _$[$0-1].first_line, _$[$0-1].first_column);
            this.$ = [parametro];
        }else if($$[$0-1] == "double"){
            const parametro = new Params($$[$0], 1, _$[$0-1].first_line, _$[$0-1].first_column);
            this.$ = [parametro];
        }else if($$[$0-1] == "boolean"){
            const parametro = new Params($$[$0], 2, _$[$0-1].first_line, _$[$0-1].first_column);
            this.$ = [parametro];
        }else if($$[$0-1] == "char"){
            const parametro = new Params($$[$0], 3, _$[$0-1].first_line, _$[$0-1].first_column);
            this.$ = [parametro];
        }else if($$[$0-1] == "string"){
            const parametro = new Params($$[$0], 4, _$[$0-1].first_line, _$[$0-1].first_column);
            this.$ = [parametro];
        }
    
break;
case 17: case 20: case 26: case 27: case 28: case 29: case 30: case 39: case 72: case 73: case 74: case 75: case 76: case 77:

        this.$ = $$[$0];
    
break;
case 18: case 19: case 21:

        this.$ = $$[$0-1];
    
break;
case 37:

        $$[$0-4].push($$[$0]);
        this.$ = $$[$0-4];
    
break;
case 44:

         this.$ = new Statement(new Array(), _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 45:

         this.$ = new Statement($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 46:

        const entlist = [];
        $$[$0-2].forEach((bloque)=>{
            let env = new Statement(bloque, _$[$0-3].first_line, _$[$0-3].first_column);
            entlist.push(env);    
        });
        let env2 = new Statement($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
        entlist.push(env2);
        console.log(entlist);
        this.$ = entlist;
    
break;
case 47:

        const entlist2 = [];
        $$[$0-1].forEach((bloque)=>{
            let env = new Statement(bloque, _$[$0-2].first_line, _$[$0-2].first_column);
            entlist2.push(env);    
        });
        console.log(entlist2);
        this.$ = entlist2;
    
break;
case 48:

        const entlist3 = [];
        let env3 = new Statement($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
        entlist3.push(env3);
        console.log(entlist3)
        this.$ = entlist3;
    
break;
case 78: case 79: case 80: case 81: case 86: case 87:

        console.log($$[$0]);
        this.$ = $$[$0];
    
break;
case 84:

        this.$ = $$[$0-1]
    
break;
case 88:

         this.$ = new Access($$[$0], _$[$0].first_line, _$[$0].first_column);
    
break;
case 91:

        this.$ = new NewArray($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 93:

        this.$ = new AccesArray($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 94:

        this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.SUMA, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 95:

        this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.RESTA, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 96:

        this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.MULTIPLICACION, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 97:

        this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.DIVISION, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 98:

        this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.POTENCIA, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 99:

        this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.MODULO, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 100:

        this.$ = new Arithmetic(new Literal(0, _$[$0-1].first_line, _$[$0-1].first_column, 0), $$[$0], ArithmeticOption.UNARIO, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 101:

        this.$ = new Logic($$[$0-2], $$[$0], LogicOption.AND, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 102:

        this.$ = new Logic($$[$0-2], $$[$0], LogicOption.OR, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 103:

        this.$ = new Logic($$[$0], null, LogicOption.NOT, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 104:

        this.$ = new Relational($$[$0-2], $$[$0], RelationalOption.IGUAL_IGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 105:

        this.$ = new Relational($$[$0-2], $$[$0], RelationalOption.DIFERENCIA, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 106:

        this.$ = new Relational($$[$0-2], $$[$0], RelationalOption.MENOR, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 107:

        this.$ = new Relational($$[$0-2], $$[$0], RelationalOption.MENOR_IGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 108:

        this.$ = new Relational($$[$0-2], $$[$0], RelationalOption.MAYOR, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 109:

        this.$ = new Relational($$[$0-2], $$[$0], RelationalOption.MAYOR_IGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 110:

        this.$ = new Ternary($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 113:

        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 0);
    
break;
case 114:

        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 1);
    
break;
case 115:

        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 2);
    
break;
case 116:

        this.$ = new Literal($$[$0].replace(/\'/g,""), _$[$0].first_line, _$[$0].first_column, 3);
    
break;
case 117:

        this.$ = new Literal($$[$0].replace(/\"/g,""), _$[$0].first_line, _$[$0].first_column, 4);
    
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:$V0,19:7,63:$V1,72:$V2,73:$V3,74:$V4,75:$V5,76:$V6,77:$V7},{1:[3]},{5:[1,16],6:17,7:4,8:5,9:6,10:$V0,19:7,63:$V1,72:$V2,73:$V3,74:$V4,75:$V5,76:$V6,77:$V7},o($V8,[2,3]),o($V8,[2,4]),o($V8,[2,5]),o($V8,[2,6]),{12:[1,19],24:18,66:20},{64:[1,21]},{11:[1,22]},o($V9,[2,72]),o($V9,[2,73]),o($V9,[2,74]),o($V9,[2,75]),o($V9,[2,76]),o($V9,[2,77]),{1:[2,1]},o($V8,[2,2]),{15:[1,23]},o([15,17,67,68],$Va,{13:[1,24],70:$Vb,71:$Vc}),o($Vd,[2,67],{17:[1,29],67:[1,27],68:[1,28]}),{19:30,72:$V2,73:$V3,74:$V4,75:$V5,76:$V6,77:$V7},{12:[1,31]},o($Ve,[2,61]),{14:[1,33],19:34,20:32,72:$V2,73:$V3,74:$V4,75:$V5,76:$V6,77:$V7},o($Vd,[2,68]),o($Vd,[2,69]),{12:$Vf,13:$Vg,18:35,25:40,49:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,78:36,79:37,80:38,81:39,82:$Vu,83:43,84:44,87:$Vv,94:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA,104:$VB},{12:$Vf,13:$Vg,18:67,25:40,49:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,69:[1,66],78:36,79:37,80:38,81:39,82:$Vu,83:43,84:44,87:$Vv,94:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA,104:$VB},{12:[1,68]},{65:[1,69]},{13:[1,70]},{14:[1,71],17:[1,72]},{21:73,49:$VC},{12:[1,75]},o($Vd,[2,63],{64:$VD,65:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR}),o($VS,[2,78]),o($VS,[2,79]),o($VS,[2,80]),o($VS,[2,81]),o($VS,[2,82]),{12:$Vf,13:$Vg,18:92,19:91,25:40,49:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,72:$V2,73:$V3,74:$V4,75:$V5,76:$V6,77:$V7,78:36,79:37,80:38,81:39,82:$Vu,83:43,84:44,87:$Vv,94:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA,104:$VB},{19:94,63:[1,93],72:$V2,73:$V3,74:$V4,75:$V5,76:$V6,77:$V7},o($VS,[2,86]),o($VS,[2,87]),o($VS,[2,88],{13:[1,95],68:[1,96]}),{12:$Vf,13:$Vg,18:97,25:40,49:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,78:36,79:37,80:38,81:39,82:$Vu,83:43,84:44,87:$Vv,94:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA,104:$VB},{12:$Vf,13:$Vg,18:98,25:40,49:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,78:36,79:37,80:38,81:39,82:$Vu,83:43,84:44,87:$Vv,94:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA,104:$VB},{13:[1,99]},{13:[1,100]},{13:[1,101]},{13:[1,102]},{13:[1,103]},{13:[1,104]},{13:[1,105]},{13:[1,106]},{13:[1,107]},{13:[1,108]},{13:[1,109]},{13:[1,110]},{84:112,85:111,100:$Vx,101:$Vy,102:$Vz,103:$VA,104:$VB},o($VT,[2,113]),o($VT,[2,114]),o($VT,[2,115]),o($VT,[2,116]),o($VT,[2,117]),o($Vd,[2,66],{67:[1,113]}),{64:$VD,65:$VE,69:[1,114],86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR},o($VU,[2,70]),{12:$VV,24:115,66:20},{12:$Vf,13:$Vg,14:[1,117],16:118,18:119,25:40,49:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,78:36,79:37,80:38,81:39,82:$Vu,83:43,84:44,87:$Vv,94:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA,104:$VB},{21:120,49:$VC},{19:121,72:$V2,73:$V3,74:$V4,75:$V5,76:$V6,77:$V7},o($V8,[2,12]),{7:129,12:$VV,19:134,22:123,23:126,24:130,25:131,26:132,27:133,28:$VW,29:$VX,30:$VY,31:135,32:136,33:137,34:138,35:139,36:$VZ,40:$V_,41:124,42:[1,127],44:125,45:$V$,46:$V01,47:$V11,48:$V21,50:[1,122],51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$V1,66:20,72:$V2,73:$V3,74:$V4,75:$V5,76:$V6,77:$V7},o($V31,[2,14]),{12:$Vf,13:$Vg,18:148,25:40,49:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,78:36,79:37,80:38,81:39,82:$Vu,83:43,84:44,87:$Vv,94:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA,104:$VB},{12:$Vf,13:$Vg,18:149,25:40,49:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,78:36,79:37,80:38,81:39,82:$Vu,83:43,84:44,87:$Vv,94:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA,104:$VB},{12:$Vf,13:$Vg,18:150,25:40,49:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,78:36,79:37,80:38,81:39,82:$Vu,83:43,84:44,87:$Vv,94:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA,104:$VB},{12:$Vf,13:$Vg,18:151,25:40,49:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,78:36,79:37,80:38,81:39,82:$Vu,83:43,84:44,87:$Vv,94:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA,104:$VB},{12:$Vf,13:$Vg,18:152,25:40,49:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,78:36,79:37,80:38,81:39,82:$Vu,83:43,84:44,87:$Vv,94:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA,104:$VB},{12:$Vf,13:$Vg,18:153,25:40,49:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,78:36,79:37,80:38,81:39,82:$Vu,83:43,84:44,87:$Vv,94:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA,104:$VB},{12:$Vf,13:$Vg,18:154,25:40,49:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,78:36,79:37,80:38,81:39,82:$Vu,83:43,84:44,87:$Vv,94:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA,104:$VB},{12:$Vf,13:$Vg,18:155,25:40,49:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,78:36,79:37,80:38,81:39,82:$Vu,83:43,84:44,87:$Vv,94:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA,104:$VB},{12:$Vf,13:$Vg,18:156,25:40,49:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,78:36,79:37,80:38,81:39,82:$Vu,83:43,84:44,87:$Vv,94:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA,104:$VB},{12:$Vf,13:$Vg,18:157,25:40,49:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,78:36,79:37,80:38,81:39,82:$Vu,83:43,84:44,87:$Vv,94:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA,104:$VB},{12:$Vf,13:$Vg,18:158,25:40,49:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,78:36,79:37,80:38,81:39,82:$Vu,83:43,84:44,87:$Vv,94:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA,104:$VB},{12:$Vf,13:$Vg,18:159,25:40,49:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,78:36,79:37,80:38,81:39,82:$Vu,83:43,84:44,87:$Vv,94:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA,104:$VB},{12:$Vf,13:$Vg,18:160,25:40,49:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,78:36,79:37,80:38,81:39,82:$Vu,83:43,84:44,87:$Vv,94:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA,104:$VB},{12:$Vf,13:$Vg,18:161,25:40,49:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,78:36,79:37,80:38,81:39,82:$Vu,83:43,84:44,87:$Vv,94:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA,104:$VB},{12:$Vf,13:$Vg,18:162,25:40,49:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,78:36,79:37,80:38,81:39,82:$Vu,83:43,84:44,87:$Vv,94:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA,104:$VB},{14:[1,163]},{14:[1,164],64:$VD,65:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR},{64:[1,165]},{68:[1,166]},{12:$Vf,13:$Vg,14:[1,168],16:167,18:119,25:40,49:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,78:36,79:37,80:38,81:39,82:$Vu,83:43,84:44,87:$Vv,94:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA,104:$VB},{84:169,100:$Vx,101:$Vy,102:$Vz,103:$VA,104:$VB},o($V41,[2,100],{64:$VD,65:$VE,91:$VK,92:$VL,93:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR}),o($V51,[2,103],{91:$VK,92:$VL,93:$VM}),{12:$Vf,13:$Vg,16:170,18:119,25:40,49:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,78:36,79:37,80:38,81:39,82:$Vu,83:43,84:44,87:$Vv,94:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA,104:$VB},{12:$Vf,13:$Vg,16:171,18:119,25:40,49:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,78:36,79:37,80:38,81:39,82:$Vu,83:43,84:44,87:$Vv,94:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA,104:$VB},{12:$Vf,13:$Vg,16:172,18:119,25:40,49:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,78:36,79:37,80:38,81:39,82:$Vu,83:43,84:44,87:$Vv,94:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA,104:$VB},{12:$Vf,13:$Vg,16:173,18:119,25:40,49:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,78:36,79:37,80:38,81:39,82:$Vu,83:43,84:44,87:$Vv,94:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA,104:$VB},{12:$Vf,13:$Vg,16:174,18:119,25:40,49:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,78:36,79:37,80:38,81:39,82:$Vu,83:43,84:44,87:$Vv,94:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA,104:$VB},{12:$Vf,13:$Vg,16:175,18:119,25:40,49:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,78:36,79:37,80:38,81:39,82:$Vu,83:43,84:44,87:$Vv,94:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA,104:$VB},{12:$Vf,13:$Vg,16:176,18:119,25:40,49:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,78:36,79:37,80:38,81:39,82:$Vu,83:43,84:44,87:$Vv,94:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA,104:$VB},{12:$Vf,13:$Vg,16:177,18:119,25:40,49:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,78:36,79:37,80:38,81:39,82:$Vu,83:43,84:44,87:$Vv,94:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA,104:$VB},{12:$Vf,13:$Vg,16:178,18:119,25:40,49:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,78:36,79:37,80:38,81:39,82:$Vu,83:43,84:44,87:$Vv,94:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA,104:$VB},{12:$Vf,13:$Vg,16:179,18:119,25:40,49:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,78:36,79:37,80:38,81:39,82:$Vu,83:43,84:44,87:$Vv,94:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA,104:$VB},{12:$Vf,13:$Vg,16:180,18:119,25:40,49:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,78:36,79:37,80:38,81:39,82:$Vu,83:43,84:44,87:$Vv,94:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA,104:$VB},{12:$Vf,13:$Vg,16:181,18:119,25:40,49:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,78:36,79:37,80:38,81:39,82:$Vu,83:43,84:44,87:$Vv,94:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA,104:$VB},{17:[1,183],50:[1,182]},o($V61,[2,112]),{12:$Vf,13:$Vg,18:184,25:40,49:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,78:36,79:37,80:38,81:39,82:$Vu,83:43,84:44,87:$Vv,94:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA,104:$VB},{67:[1,185]},{15:[1,186]},o($VU,$Va,{70:$Vb,71:$Vc}),{15:[1,187]},{14:[1,188],17:$V71},o($V31,[2,10],{64:$VD,65:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR}),o($V8,[2,11]),{12:[1,190]},o($V81,[2,44]),{7:129,12:$VV,19:134,23:192,24:130,25:131,26:132,27:133,28:$VW,29:$VX,30:$VY,31:135,32:136,33:137,34:138,35:139,36:$VZ,40:$V_,46:$V01,47:$V11,48:$V21,50:[1,191],51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$V1,66:20,72:$V2,73:$V3,74:$V4,75:$V5,76:$V6,77:$V7},{42:[1,195],44:193,45:$V$,50:[1,194]},{50:[1,196]},o($V91,[2,16]),{12:$Vf,13:$Vg,18:197,25:40,49:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,78:36,79:37,80:38,81:39,82:$Vu,83:43,84:44,87:$Vv,94:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA,104:$VB},{43:[1,198]},o($V91,[2,17]),{15:[1,199]},{15:[1,200]},o($V91,[2,20]),{15:[1,201]},{12:$VV,24:18,66:20},o($V91,[2,26]),o($V91,[2,27]),o($V91,[2,28]),o($V91,[2,29]),o($V91,[2,30]),{15:[2,22]},{12:$Vf,13:$Vg,15:[2,24],18:202,25:40,49:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,78:36,79:37,80:38,81:39,82:$Vu,83:43,84:44,87:$Vv,94:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA,104:$VB},{15:[2,25]},{13:[1,203]},{13:[1,204]},{13:[1,205]},{13:[1,206]},{21:207,49:$VC},o($V41,[2,94],{64:$VD,65:$VE,91:$VK,92:$VL,93:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR}),o($V41,[2,95],{64:$VD,65:$VE,91:$VK,92:$VL,93:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR}),o($Va1,[2,96],{64:$VD,65:$VE,86:$VF,87:$VG,91:$VK,92:$VL,93:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR}),o($Va1,[2,97],{64:$VD,65:$VE,86:$VF,87:$VG,91:$VK,92:$VL,93:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR}),o($Vb1,[2,98],{64:$VD,65:$VE,86:$VF,87:$VG,88:$VH,89:$VI,91:$VK,92:$VL,93:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR}),o($VS,[2,99]),o([14,15,17,43,64,65,69,86,87,88,89,90,92,95,96,97,98,99],[2,101],{91:$VK,93:$VM}),o([14,15,17,43,64,65,69,86,87,88,89,90,92,93,95,96,97,98,99],[2,102],{91:$VK}),o($V51,[2,104],{91:$VK,92:$VL,93:$VM}),o($V51,[2,105],{91:$VK,92:$VL,93:$VM}),o($V51,[2,106],{91:$VK,92:$VL,93:$VM}),o($V51,[2,107],{91:$VK,92:$VL,93:$VM}),o($V51,[2,108],{91:$VK,92:$VL,93:$VM}),o($V51,[2,109],{91:$VK,92:$VL,93:$VM}),{43:[1,208],64:$VD,65:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR},{12:$Vf,13:$Vg,18:209,25:40,49:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,78:36,79:37,80:38,81:39,82:$Vu,83:43,84:44,87:$Vv,94:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA,104:$VB},o($VS,[2,84]),{19:210,72:$V2,73:$V3,74:$V4,75:$V5,76:$V6,77:$V7},{12:$Vf,13:$Vg,18:211,25:40,49:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,78:36,79:37,80:38,81:39,82:$Vu,83:43,84:44,87:$Vv,94:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA,104:$VB},{14:[1,212],17:$V71},o($VS,[2,90]),{69:[1,213]},{14:[1,214],17:$V71},{14:[1,215],17:$V71},{14:[1,216],17:$V71},{14:[1,217],17:$V71},{14:[1,218],17:$V71},{14:[1,219],17:$V71},{14:[1,220],17:$V71},{14:[1,221],17:$V71},{14:[1,222],17:$V71},{14:[1,223],17:$V71},{14:[1,224],17:$V71},{14:[1,225],17:$V71},o($VS,[2,91]),{84:226,100:$Vx,101:$Vy,102:$Vz,103:$VA,104:$VB},o($Vd,[2,64],{64:$VD,65:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR}),{12:$Vf,13:$Vg,18:227,25:40,49:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,78:36,79:37,80:38,81:39,82:$Vu,83:43,84:44,87:$Vv,94:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA,104:$VB},o($Ve,[2,62]),o($V8,[2,7]),{15:[1,228]},{12:$Vf,13:$Vg,18:229,25:40,49:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,78:36,79:37,80:38,81:39,82:$Vu,83:43,84:44,87:$Vv,94:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA,104:$VB},o($V31,[2,13]),o($V81,[2,45]),o($V91,[2,15]),{50:[1,230]},o($V81,[2,47]),{12:$Vf,13:$Vg,18:231,25:40,49:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,78:36,79:37,80:38,81:39,82:$Vu,83:43,84:44,87:$Vv,94:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA,104:$VB},o($V81,[2,48]),{43:[1,232],64:$VD,65:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR},{7:129,12:$VV,19:134,22:233,23:126,24:130,25:131,26:132,27:133,28:$VW,29:$VX,30:$VY,31:135,32:136,33:137,34:138,35:139,36:$VZ,40:$V_,46:$V01,47:$V11,48:$V21,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$V1,66:20,72:$V2,73:$V3,74:$V4,75:$V5,76:$V6,77:$V7},o($V91,[2,18]),o($V91,[2,19]),o($V91,[2,21]),{15:[2,23],64:$VD,65:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR},{12:$Vf,13:$Vg,18:234,25:40,49:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,78:36,79:37,80:38,81:39,82:$Vu,83:43,84:44,87:$Vv,94:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA,104:$VB},{12:$Vf,13:$Vg,18:235,25:40,49:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,78:36,79:37,80:38,81:39,82:$Vu,83:43,84:44,87:$Vv,94:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA,104:$VB},{12:$Vf,13:$Vg,18:236,25:40,49:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,78:36,79:37,80:38,81:39,82:$Vu,83:43,84:44,87:$Vv,94:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA,104:$VB},{7:237,12:$VV,19:134,24:238,63:$V1,66:20,72:$V2,73:$V3,74:$V4,75:$V5,76:$V6,77:$V7},{46:[1,239]},{12:$Vf,13:$Vg,18:240,25:40,49:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,78:36,79:37,80:38,81:39,82:$Vu,83:43,84:44,87:$Vv,94:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA,104:$VB},o($Vb1,[2,83],{64:$VD,65:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR}),{65:[1,241]},{64:$VD,65:$VE,69:[1,242],86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR},o($VS,[2,89]),o($VS,[2,93]),o($VS,[2,49]),o($VS,[2,50]),o($VS,[2,51]),o($VS,[2,52]),o($VS,[2,53]),o($VS,[2,54]),o($VS,[2,55]),o($VS,[2,56]),o($VS,[2,57]),o($VS,[2,58]),o($VS,[2,59]),o($VS,[2,60]),o($V61,[2,111]),o($Vd,[2,65],{64:$VD,65:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR}),o($V8,[2,8]),o($V31,[2,9],{64:$VD,65:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR}),o($V81,[2,46]),{43:[1,243],64:$VD,65:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR},{7:129,12:$VV,19:134,22:244,23:126,24:130,25:131,26:132,27:133,28:$VW,29:$VX,30:$VY,31:135,32:136,33:137,34:138,35:139,36:$VZ,40:$V_,46:$V01,47:$V11,48:$V21,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$V1,66:20,72:$V2,73:$V3,74:$V4,75:$V5,76:$V6,77:$V7},{7:129,12:$VV,19:134,23:192,24:130,25:131,26:132,27:133,28:$VW,29:$VX,30:$VY,31:135,32:136,33:137,34:138,35:139,36:$VZ,40:$V_,46:$V01,47:$V11,48:$V21,50:[2,39],51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$V1,66:20,72:$V2,73:$V3,74:$V4,75:$V5,76:$V6,77:$V7},{14:[1,245],64:$VD,65:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR},{14:[1,246],64:$VD,65:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR},{14:[1,247],64:$VD,65:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR},{12:$Vf,13:$Vg,18:248,25:40,49:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,78:36,79:37,80:38,81:39,82:$Vu,83:43,84:44,87:$Vv,94:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA,104:$VB},{15:[1,249]},{13:[1,250]},o([14,15,17,43,69,86,87,88,89,90,99],[2,110],{64:$VD,65:$VE,91:$VK,92:$VL,93:$VM,95:$VN,96:$VO,97:$VP,98:$VQ}),o($VS,[2,85]),o($VS,[2,92]),{7:129,12:$VV,19:134,22:251,23:126,24:130,25:131,26:132,27:133,28:$VW,29:$VX,30:$VY,31:135,32:136,33:137,34:138,35:139,36:$VZ,40:$V_,46:$V01,47:$V11,48:$V21,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$V1,66:20,72:$V2,73:$V3,74:$V4,75:$V5,76:$V6,77:$V7},o($Vc1,[2,38],{66:20,7:129,24:130,25:131,26:132,27:133,19:134,31:135,32:136,33:137,34:138,35:139,23:192,12:$VV,28:$VW,29:$VX,30:$VY,36:$VZ,40:$V_,46:$V01,47:$V11,48:$V21,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$V1,72:$V2,73:$V3,74:$V4,75:$V5,76:$V6,77:$V7}),{21:252,49:$VC},{21:253,49:$VC},{21:254,49:$VC},{15:[1,255],64:$VD,65:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR},{12:$Vf,13:$Vg,18:256,25:40,49:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,78:36,79:37,80:38,81:39,82:$Vu,83:43,84:44,87:$Vv,94:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA,104:$VB},{12:$Vf,13:$Vg,18:257,25:40,49:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,78:36,79:37,80:38,81:39,82:$Vu,83:43,84:44,87:$Vv,94:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA,104:$VB},o($Vc1,[2,37],{66:20,7:129,24:130,25:131,26:132,27:133,19:134,31:135,32:136,33:137,34:138,35:139,23:192,12:$VV,28:$VW,29:$VX,30:$VY,36:$VZ,40:$V_,46:$V01,47:$V11,48:$V21,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$V1,72:$V2,73:$V3,74:$V4,75:$V5,76:$V6,77:$V7}),o($V91,[2,31],{37:258,38:259,39:[1,260]}),o($V91,[2,36]),o($V91,[2,40]),{12:$VV,24:261,66:20},{15:[1,262],64:$VD,65:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR},{14:[1,263],64:$VD,65:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR},o($V91,[2,32]),o($V91,[2,33]),{21:264,31:265,36:$VZ,49:$VC},{14:[1,266]},{12:$VV,24:267,66:20},{15:[1,268]},o($V91,[2,34]),o($V91,[2,35]),{21:269,49:$VC},{14:[1,270]},o($V91,[2,43]),o($V91,[2,41]),{21:271,49:$VC},o($V91,[2,42])],
defaultActions: {16:[2,1],140:[2,22],142:[2,25]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const { Literal } = require('../modelos/Expresiones/Literal');
    const { Arithmetic, ArithmeticOption } = require('../modelos/Expresiones/Arithmetic');
    const { Relational, RelationalOption } = require('../modelos/Expresiones/Relational');
    const { Logic, LogicOption } = require('../modelos/Expresiones/Logic');
    const { Ternary } = require('../modelos/Expresiones/Ternary');
    const { AccesArray } = require('../modelos/Expresiones/AccesArray');
    const { NewArray } = require('../modelos/Expresiones/NewArray');
    const { Array } = require('../modelos/Symbol/Array');
    const { Access } = require('../modelos/Expresiones/Access');
    const { Params } = require('../modelos/Expresiones/Params');
    //const { CallExp } = require('../modelos/Expresiones/CallExp');
    //const { Call } = require('../modelos/Instrucciones/Call');
    const { Function } = require('../modelos/Instrucciones/Function');
    const { Statement } = require('../modelos/Instrucciones/Statement');
    console.log("SE COMPILO EL ARCHIVO .JISON");
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 82
break;
case 4:return 63
break;
case 5:return 51
break;
case 6:return 54
break;
case 7:return 52
break;
case 8:return 36
break;
case 9:return 39
break;
case 10:return 40
break;
case 11:return 42
break;
case 12:return 45
break;
case 13:return 46
break;
case 14:return 47
break;
case 15:return 48
break;
case 16:return 28
break;
case 17:return 30
break;
case 18:return 29
break;
case 19:return 77
break;
case 20:return 10
break;
case 21:return 11
break;
case 22:return 53 
break;
case 23:return 55
break;
case 24:return 56
break;
case 25:return 57
break;
case 26:return 58
break;
case 27:return 59 
break;
case 28:return 60
break;
case 29:return 61
break;
case 30:return 62
break;
case 31:return 75
break;
case 32:return 73
break;
case 33:return 74
break;
case 34:return 76
break;
case 35:return 72 
break;
case 36:return 70
break;
case 37:return 71
break;
case 38:return 86
break;
case 39:return 87
break;
case 40:return 89
break;
case 41:return 88
break;
case 42:return 90
break;
case 43:return 91
break;
case 44:return 64
break;
case 45:return 65
break;
case 46:return 97
break;
case 47:return 98
break;
case 48:return 95
break;
case 49:return 96
break;
case 50:return 67
break;
case 51:return 93
break;
case 52:return 92
break;
case 53:return 94
break;
case 54:return 43
break;
case 55:return 99
break;
case 56:return 15
break;
case 57:return 17
break;
case 58:return 67
break;
case 59:return 13
break;
case 60:return 14 
break;
case 61:return 49
break;
case 62:return 50
break;
case 63:return 68
break;
case 64:return 69
break;
case 65:return 103
break;
case 66:return 101
break;
case 67:return 100
break;
case 68:return 102
break;
case 69:return 104
break;
case 70:return 12
break;
case 71:return 5
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:new\b)/i,/^(?:DynamicList\b)/i,/^(?:append\b)/i,/^(?:getValue\b)/i,/^(?:setValue\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:start\b)/i,/^(?:with\b)/i,/^(?:WriteLine\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:toCharArray\b)/i,/^(?:string\b)/i,/^(?:char\b)/i,/^(?:int\b)/i,/^(?:boolean\b)/i,/^(?:double\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:ˆ)/i,/^(?:%)/i,/^(?:<)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?::)/i,/^(?:\?)/i,/^(?:;)/i,/^(?:,)/i,/^(?:=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:([\']([\\].|[^\'\n])[\']))/i,/^(?:(([0-9]+)\.([0-9]+)))/i,/^(?:([0-9]+))/i,/^(?:(true|false\b))/i,/^(?:([\"]([\\][\"]|[^\"])*[\"]))/i,/^(?:((([a-zA-ZÑñ]+)|(_([a-zA-ZÑñ]+))|(([a-zA-ZÑñ]+)_))(([a-zA-ZÑñ]+)|([0-9]+)|_)*))/i,/^(?:$)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}