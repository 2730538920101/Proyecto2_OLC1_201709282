/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,9],$V2=[1,11],$V3=[1,12],$V4=[1,13],$V5=[1,14],$V6=[1,15],$V7=[1,16],$V8=[5,10,65,73,74,75,76,77,78],$V9=[12,14,67,69],$Va=[1,28],$Vb=[1,26],$Vc=[1,27],$Vd=[15,17,68,69],$Ve=[2,75],$Vf=[1,30],$Vg=[1,31],$Vh=[5,10,12,13,28,29,30,36,39,42,45,46,47,48,49,50,51,52,53,55,56,57,58,59,60,61,62,63,65,73,74,75,76,77,78,83,88,95,101,102,103,104,105],$Vi=[1,44],$Vj=[1,40],$Vk=[1,56],$Vl=[1,47],$Vm=[1,48],$Vn=[1,49],$Vo=[1,50],$Vp=[1,51],$Vq=[1,52],$Vr=[1,53],$Vs=[1,54],$Vt=[1,55],$Vu=[1,41],$Vv=[1,45],$Vw=[1,46],$Vx=[1,57],$Vy=[1,58],$Vz=[1,59],$VA=[1,60],$VB=[1,61],$VC=[14,15],$VD=[1,80],$VE=[1,82],$VF=[1,70],$VG=[1,71],$VH=[1,72],$VI=[1,73],$VJ=[1,74],$VK=[1,75],$VL=[1,76],$VM=[1,77],$VN=[1,78],$VO=[1,79],$VP=[1,81],$VQ=[1,83],$VR=[1,84],$VS=[14,15,17,43,66,67,70,87,88,89,90,91,92,93,94,96,97,98,99,100],$VT=[14,15,17,43,50,66,67,70,87,88,89,90,91,92,93,94,96,97,98,99,100],$VU=[1,111],$VV=[1,115],$VW=[14,15,17,43,70,87,88,89,90,91],$VX=[14,15,17,43,66,67,70,87,88,89,90,91,96,97,98,99,100],$VY=[17,50],$VZ=[1,166],$V_=[1,175],$V$=[1,176],$V01=[1,177],$V11=[1,178],$V21=[1,179],$V31=[1,180],$V41=[1,181],$V51=[1,182],$V61=[1,167],$V71=[1,168],$V81=[1,169],$V91=[14,17],$Va1=[1,187],$Vb1=[14,15,17,43,70,89,90,91],$Vc1=[14,15,17,43,70],$Vd1=[5,10,12,28,29,30,36,38,39,42,45,46,47,48,50,51,52,53,65,73,74,75,76,77,78],$Ve1=[12,28,29,30,36,39,42,45,46,47,48,50,51,52,53,65,73,74,75,76,77,78],$Vf1=[1,265],$Vg1=[42,45,50];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"ENTORNO_GLOBAL":4,"EOF":5,"GLOBAL":6,"DECLARACION_VARIABLE":7,"DECLARACION_FUNCIONES":8,"INICIAR_SISTEMA":9,"start":10,"with":11,"id":12,"(":13,")":14,";":15,"LISTA_VALORES":16,",":17,"EXPRESION":18,"TIPO_DATO":19,"PARAMETROS_FUNCION":20,"ENTORNO":21,"INSTRUCCIONES":22,"INSTRUCCION":23,"ASIGNACION":24,"METODOS_CALL":25,"SENTENCIAS":26,"TRANSFERENCIA":27,"break":28,"return":29,"continue":30,"GENERARIF":31,"GENERARSWITCH":32,"GENERARWHILE":33,"GENERARFOR":34,"GENERARDOWHILE":35,"if":36,"GENERARELSE":37,"else":38,"switch":39,"ENTORNO_SWITCH":40,"CASES_LIST":41,"case":42,":":43,"DEFAULT":44,"default":45,"while":46,"for":47,"do":48,"{":49,"}":50,"append":51,"setValue":52,"WriteLine":53,"FUNCIONES_CALL":54,"getValue":55,"toLower":56,"toUpper":57,"length":58,"truncate":59,"round":60,"typeof":61,"tostring":62,"toCharArray":63,"LISTA_ID":64,"lista_dinamica":65,"<":66,">":67,"=":68,"[":69,"]":70,"++":71,"--":72,"t_double":73,"t_char":74,"t_int":75,"t_string":76,"t_boolean":77,"void":78,"EXPMAT":79,"EXPLOG":80,"EXPREL":81,"EXPTER":82,"new":83,"ARRAY":84,"VALORES":85,"VALORES_LIST":86,"+":87,"-":88,"/":89,"*":90,"ˆ":91,"%":92,"&&":93,"||":94,"!":95,"==":96,"!=":97,"<=":98,">=":99,"?":100,"int":101,"double":102,"boolean":103,"char":104,"string":105,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"start",11:"with",12:"id",13:"(",14:")",15:";",17:",",28:"break",29:"return",30:"continue",36:"if",38:"else",39:"switch",42:"case",43:":",45:"default",46:"while",47:"for",48:"do",49:"{",50:"}",51:"append",52:"setValue",53:"WriteLine",55:"getValue",56:"toLower",57:"toUpper",58:"length",59:"truncate",60:"round",61:"typeof",62:"tostring",63:"toCharArray",65:"lista_dinamica",66:"<",67:">",68:"=",69:"[",70:"]",71:"++",72:"--",73:"t_double",74:"t_char",75:"t_int",76:"t_string",77:"t_boolean",78:"void",83:"new",87:"+",88:"-",89:"/",90:"*",91:"ˆ",92:"%",93:"&&",94:"||",95:"!",96:"==",97:"!=",98:"<=",99:">=",100:"?",101:"int",102:"double",103:"boolean",104:"char",105:"string"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[6,1],[6,1],[6,1],[9,6],[9,7],[16,3],[16,1],[8,6],[8,5],[20,4],[20,2],[22,2],[22,1],[23,1],[23,2],[23,2],[23,1],[23,2],[27,1],[27,2],[27,1],[27,1],[26,1],[26,1],[26,1],[26,1],[26,1],[31,6],[37,2],[37,2],[37,0],[32,5],[41,5],[41,4],[44,3],[33,5],[34,8],[34,9],[35,7],[40,4],[40,3],[40,3],[21,2],[21,3],[25,6],[25,6],[25,4],[25,4],[25,3],[54,6],[54,4],[54,4],[54,4],[54,4],[54,4],[54,4],[54,4],[54,4],[54,4],[54,3],[7,3],[7,3],[7,6],[7,6],[24,3],[24,5],[24,6],[24,2],[24,2],[64,3],[64,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,4],[18,3],[18,5],[18,1],[18,1],[18,1],[18,2],[18,2],[84,3],[84,5],[84,4],[79,3],[79,3],[79,3],[79,3],[79,3],[79,3],[79,2],[80,3],[80,3],[80,2],[81,3],[81,3],[81,3],[81,3],[81,3],[81,3],[82,5],[86,3],[86,1],[85,1],[85,1],[85,1],[85,1],[85,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        try{
            console.log('ANALISIS EXITOSO');
            return $$[$0-1];
        }catch(e){
            console.log("EXISTE UNO O VARIOS ERRORES");
        }
        
    
break;
case 2: case 16:

        $$[$0-1].push($$[$0]);
        this.$ = $$[$0-1];
    
break;
case 3: case 11: case 17: case 75: case 116:

        this.$ = [$$[$0]];
    
break;
case 4:
 
        let er = new MiError(_$[$0].first_line, _$[$0].first_column, TypeError.SINTACTICO, "ERROR SINTACTICO EN: "+ yytext);
        errores.push(er);    
    
break;
case 5: case 6:

        //console.log($$[$0]);
        this.$=$$[$0];
    
break;
case 7:

        //console.log($$[$0]);
        this.$=$$[$0]
    
break;
case 8:

        this.$ = new Call($$[$0-3], [], TypeCall.START, _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 9:

        this.$ = new Call($$[$0-4], $$[$0-2], TypeCall.START, _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 10: case 74: case 115:

        $$[$0-2].push($$[$0]);
        this.$ = $$[$0-2];
    
break;
case 12:

        if($$[$0-5] == "int"){
            this.$ = new Function($$[$0-4], 0, $$[$0], $$[$0-2], _$[$0-5].first_line, _$[$0-5].first_column);
        }else if($$[$0-5] == "double"){
            this.$ = new Function($$[$0-4], 1, $$[$0], $$[$0-2], _$[$0-5].first_line, _$[$0-5].first_column);
        }else if($$[$0-5] == "boolean"){
            this.$ = new Function($$[$0-4], 2, $$[$0], $$[$0-2], _$[$0-5].first_line, _$[$0-5].first_column);
        }else if($$[$0-5] == "char"){
            this.$ = new Function($$[$0-4], 3, $$[$0], $$[$0-2], _$[$0-5].first_line, _$[$0-5].first_column);
        }else if($$[$0-5] == "string"){
            this.$ = new Function($$[$0-4], 4, $$[$0], $$[$0-2], _$[$0-5].first_line, _$[$0-5].first_column);
        }else if($$[$0-5] == "void"){
            this.$ = new Function($$[$0-4], 5, $$[$0], $$[$0-2], _$[$0-5].first_line, _$[$0-5].first_column);
        }    
        
    
break;
case 13:
   
        if($$[$0-4] == "int"){
            this.$ = new Function($$[$0-3], 0, $$[$0], [], _$[$0-4].first_line, _$[$0-4].first_column);
        }else if($$[$0-4] == "double"){
            this.$ = new Function($$[$0-3], 1, $$[$0], [], _$[$0-4].first_line, _$[$0-4].first_column);
        }else if($$[$0-4] == "boolean"){
            this.$ = new Function($$[$0-3], 2, $$[$0], [], _$[$0-4].first_line, _$[$0-4].first_column);
        }else if($$[$0-4] == "char"){
            this.$ = new Function($$[$0-3], 3, $$[$0], [], _$[$0-4].first_line, _$[$0-4].first_column);
        }else if($$[$0-4] == "string"){
            this.$ = new Function($$[$0-3], 4, $$[$0], [], _$[$0-4].first_line, _$[$0-4].first_column);
        }else if($$[$0-4] == "void"){
            this.$ = new Function($$[$0-3], 5, $$[$0], [], _$[$0-4].first_line, _$[$0-4].first_column);
        }    
    
break;
case 14:

        if($$[$0-1] == "int"){
            const parametro = new Params($$[$0], 0, _$[$0-3].first_line, _$[$0-3].first_column);
            $$[$0-3].push(parametro);
            this.$ = $$[$0-3];
        }else if($$[$0-1] == "double"){
            const parametro = new Params($$[$0], 1, _$[$0-3].first_line, _$[$0-3].first_column);
            $$[$0-3].push(parametro);
            this.$ = $$[$0-3];
        }else if($$[$0-1] == "boolean"){
            const parametro = new Params($$[$0], 2, _$[$0-3].first_line, _$[$0-3].first_column);
            $$[$0-3].push(parametro);
            this.$ = $$[$0-3];
        }else if($$[$0-1] == "char"){
            const parametro = new Params($$[$0], 3, _$[$0-3].first_line, _$[$0-3].first_column);
            $$[$0-3].push(parametro);
            this.$ = $$[$0-3];
        }else if($$[$0-1] == "string"){
            const parametro = new Params($$[$0], 4, _$[$0-3].first_line, _$[$0-3].first_column);
            this.$ = [parametro];
        }

    
break;
case 15:

        if($$[$0-1] == "int"){
            const parametro = new Params($$[$0], 0, _$[$0-1].first_line, _$[$0-1].first_column);
            this.$ = [parametro];
        }else if($$[$0-1] == "double"){
            const parametro = new Params($$[$0], 1, _$[$0-1].first_line, _$[$0-1].first_column);
            this.$ = [parametro];
        }else if($$[$0-1] == "boolean"){
            const parametro = new Params($$[$0], 2, _$[$0-1].first_line, _$[$0-1].first_column);
            this.$ = [parametro];
        }else if($$[$0-1] == "char"){
            const parametro = new Params($$[$0], 3, _$[$0-1].first_line, _$[$0-1].first_column);
            this.$ = [parametro];
        }else if($$[$0-1] == "string"){
            const parametro = new Params($$[$0], 4, _$[$0-1].first_line, _$[$0-1].first_column);
            this.$ = [parametro];
        }
    
break;
case 18: case 21:

        //console.log($$[$0]);
        this.$ = $$[$0];
    
break;
case 19: case 20: case 22:

        //console.log($$[$0-1]);
        this.$ = $$[$0-1];
    
break;
case 23:

        this.$ = new Break(_$[$0].first_line, _$[$0].first_column);
    
break;
case 24:

        this.$ = new Return($$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 25:

        this.$ = new Return(null, _$[$0].first_line, _$[$0].first_column);
    
break;
case 26:

        this.$ = new Continue(_$[$0].first_line, _$[$0].first_column);
    
break;
case 27: case 28: case 29: case 30: case 31: case 33: case 34: case 82: case 83: case 84: case 85: case 86: case 90: case 91:

        this.$ = $$[$0];
    
break;
case 32:

        this.$ = new If($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 35:

        this.$ = null;
    
break;
case 36:

        this.$ = new Switch($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 37:

        let code = new Statement($$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
        let case1 =  new Case($$[$0-2], code, _$[$0-4].first_line, _$[$0-4].first_column);
        $$[$0-4].push(case1);
        this.$ = $$[$0-4];
    
break;
case 38:

        let code2 = new Statement($$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
        let case2 =  new Case($$[$0-2], code2, _$[$0-3].first_line, _$[$0-3].first_column);
        this.$ = [case2];
    
break;
case 39:

        let code3  = new Statement($$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
        let case3 =  new Case(null, code3, _$[$0-2].first_line, _$[$0-2].first_column);
        this.$ = case3;
    
break;
case 40:

        this.$ = new While($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 41:

        this.$ = new For($$[$0-5], $$[$0-4], $$[$0-2], $$[$0], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 42:

        this.$ = new For($$[$0-6], $$[$0-4], $$[$0-2], $$[$0], _$[$0-8].first_line, _$[$0-8].first_column);
    
break;
case 43:

        this.$ = new DoWhile($$[$0-2], $$[$0-5], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 44:

        $$[$0-2].push($$[$0-1]);
        this.$ = $$[$0-2];
    
break;
case 45:

        this.$ = $$[$0-1];
    
break;
case 46:

        this.$ = [$$[$0-1]];  
    
break;
case 47:

         this.$ = new Statement([], _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 48:

         this.$ = new Statement($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 49:

        this.$ = new Call($$[$0-3], [$$[$0-1]], TypeCall.APPEND, _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 50:

        this.$ = new Call($$[$0-3], $$[$0-1], TypeCall.SETVALUE, _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 51:

        this.$ = new Call($$[$0-3], $$[$0-1], TypeCall.WRITELINE, _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 52:

        this.$ = new Call($$[$0-3], $$[$0-1], TypeCall.DECLARED, _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 53:

        this.$ = new Call($$[$0-2], [], TypeCall.DECLARED, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 54:

        this.$ = new CallExp($$[$0-3], $$[$0-1], TypeCallExp.GETVALUE, _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 55:

        this.$ = new CallExp($$[$0-3], $$[$0-1], TypeCallExp.TOLOWER, _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 56:

        this.$ = new CallExp($$[$0-3], $$[$0-1], TypeCallExp.TOUPPER, _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 57:

        this.$ = new CallExp($$[$0-3], $$[$0-1], TypeCallExp.LENGTH, _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 58:

        this.$ = new CallExp($$[$0-3], $$[$0-1], TypeCallExp.TRUNCATE, _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 59:

        this.$ = new CallExp($$[$0-3], $$[$0-1], TypeCallExp.ROUND, _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 60:

        this.$ = new CallExp($$[$0-3], $$[$0-1], TypeCallExp.TYPEOF, _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 61:

        this.$ = new CallExp($$[$0-3], $$[$0-1], TypeCallExp.TOSTRING, _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 62:

        this.$ = new CallExp($$[$0-3], $$[$0-1], TypeCallExp.TOCHARARRAY, _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 63:

        this.$ = new CallExp($$[$0-3], $$[$0-1], TypeCallExp.DECLARED, _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 64:

        this.$ = new CallExp($$[$0-2], [], TypeCallExp.DECLARED, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 65: case 66:

        if($$[$0-2] == "int"){
            this.$ = new Declaration( 0, $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
        }else if($$[$0-2] == "double"){
            this.$ = new Declaration( 1, $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
        }else if($$[$0-2] == "boolean"){
            this.$ = new Declaration( 2, $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
        }else if($$[$0-2] == "char"){
            this.$ = new Declaration( 3, $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
        }else if($$[$0-2] == "string"){
            this.$ = new Declaration( 4, $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
        }    
    
break;
case 67: case 68:

         if($$[$0-3] == "int"){
            this.$ = new Declaration( 0, $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);
        }else if($$[$0-3] == "double"){
            this.$ = new Declaration( 1, $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);
        }else if($$[$0-3] == "boolean"){
            this.$ = new Declaration( 2, $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);
        }else if($$[$0-3] == "char"){
            this.$ = new Declaration( 3, $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);
        }else if($$[$0-3] == "string"){
            this.$ = new Declaration( 4, $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);
        }    
    
break;
case 69:

        this.$ = new Assigment($$[$0-2],$$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
        //console.log($$[$0]);

    
break;
case 70:

        this.$ = new Assigment($$[$0-4],$$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
        //console.log($$[$0]);
    
break;
case 71:

        this.$ = new AccessArrayAssigment($$[$0-5], $$[$0-3], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
        //console.log($$[$0]);
    
break;
case 72:

        this.$ = new ArithmeticAccessI($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 73:

        this.$ = new ArithmeticAccessI2($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 76: case 77: case 78: case 79: case 80: case 81:

        this.$ = $$[$0].toLowerCase();
    
break;
case 87:

        if($$[$0-2] == "int"){
            this.$ = new Casting(0, $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
        }else if($$[$0-2] == "double"){
            this.$ = new Casting(1, $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
        }else if($$[$0-2] == "char"){
            this.$ = new Casting(3, $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
        }else{
            this.$ = new Casting(5, $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
        }
    
break;
case 88:

        this.$ = $$[$0-1]
    
break;
case 89:

         if($$[$0-1] == "int"){
            this.$ = new NewList(0, _$[$0-4].first_line, _$[$0-4].first_column);
        }else if($$[$0-1] == "double"){
            this.$ = new NewList(1, _$[$0-4].first_line, _$[$0-4].first_column);
        }else if($$[$0-1] == "boolean"){
            this.$ = new NewList(2, _$[$0-4].first_line, _$[$0-4].first_column);
        }else if($$[$0-1] == "char"){
            this.$ = new NewList(3, _$[$0-4].first_line, _$[$0-4].first_column);
        }else if($$[$0-1] == "string"){
            this.$ = new NewList(4, _$[$0-4].first_line, _$[$0-4].first_column);
        }    
    
break;
case 92:

        this.$ = new Access($$[$0], _$[$0].first_line, _$[$0].first_column);
    
break;
case 93:

        this.$ = new ArithmeticAccess($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 94:

        this.$ = new ArithmeticAccess2($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 95:

        this.$ = new NewArray($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);    
    
break;
case 96:

        if($$[$0-3] == "int"){
            this.$ = new NewCleanArray($$[$0-1], 0, _$[$0-4].first_line, _$[$0-4].first_column);
        }else if($$[$0-3] == "double"){
            this.$ = new NewCleanArray($$[$0-1], 1, _$[$0-4].first_line, _$[$0-4].first_column);
        }else if($$[$0-3] == "boolean"){
            this.$ = new NewCleanArray($$[$0-1], 2, _$[$0-4].first_line, _$[$0-4].first_column);
        }else if($$[$0-3] == "char"){
            this.$ = new NewCleanArray($$[$0-1], 3, _$[$0-4].first_line, _$[$0-4].first_column);
        }else if($$[$0-3] == "string"){
            this.$ = new NewCleanArray($$[$0-1], 4, _$[$0-4].first_line, _$[$0-4].first_column);
        }
    
break;
case 97:

        this.$ = new AccesArray($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 98:

        this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.SUMA, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 99:

        this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.RESTA, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 100:

        this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.DIVISION, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 101:

        this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.MULTIPLICACION, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 102:

        this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.POTENCIA, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 103:

        this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.MODULO, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 104:

        this.$ = new Arithmetic(new Literal(0, _$[$0-1].first_line, _$[$0-1].first_column, 0), $$[$0], ArithmeticOption.UNARIO, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 105:

        this.$ = new Logic($$[$0-2], $$[$0], LogicOption.AND, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 106:

        this.$ = new Logic($$[$0-2], $$[$0], LogicOption.OR, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 107:

        this.$ = new Logic($$[$0], null, LogicOption.NOT, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 108:

        this.$ = new Relational($$[$0-2], $$[$0], RelationalOption.IGUAL_IGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 109:

        this.$ = new Relational($$[$0-2], $$[$0], RelationalOption.DIFERENCIA, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 110:

        this.$ = new Relational($$[$0-2], $$[$0], RelationalOption.MENOR, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 111:

        this.$ = new Relational($$[$0-2], $$[$0], RelationalOption.MENOR_IGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 112:

        this.$ = new Relational($$[$0-2], $$[$0], RelationalOption.MAYOR, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 113:

        this.$ = new Relational($$[$0-2], $$[$0], RelationalOption.MAYOR_IGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 114:

        this.$ = new Ternary($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 117:

        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 0);
    
break;
case 118:

        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 1);
    
break;
case 119:

        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 2);
    
break;
case 120:

        this.$ = new Literal($$[$0].replace(/\'/g,""), _$[$0].first_line, _$[$0].first_column, 3);
    
break;
case 121:

        this.$ = new Literal($$[$0].replace(/\"/g,""), _$[$0].first_line, _$[$0].first_column, 4);
    
break;
}
},
table: [{2:[1,4],3:1,4:2,6:3,7:5,8:6,9:7,10:$V0,19:8,65:$V1,73:$V2,74:$V3,75:$V4,76:$V5,77:$V6,78:$V7},{1:[3]},{5:[1,17],6:18,7:5,8:6,9:7,10:$V0,19:8,65:$V1,73:$V2,74:$V3,75:$V4,76:$V5,77:$V6,78:$V7},o($V8,[2,3]),o($V8,[2,4]),o($V8,[2,5]),o($V8,[2,6]),o($V8,[2,7]),{12:[1,21],24:19,64:20},{66:[1,22]},{11:[1,23]},o($V9,[2,76]),o($V9,[2,77]),o($V9,[2,78]),o($V9,[2,79]),o($V9,[2,80]),o($V9,[2,81]),{1:[2,1]},o($V8,[2,2]),{15:[1,24]},{15:[1,25],17:$Va,68:$Vb,69:$Vc},o($Vd,$Ve,{13:[1,29],71:$Vf,72:$Vg}),{19:32,73:$V2,74:$V3,75:$V4,76:$V5,77:$V6,78:$V7},{12:[1,33]},o($Vh,[2,65]),o($Vh,[2,66]),{12:$Vi,13:$Vj,18:34,49:$Vk,54:39,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,79:35,80:36,81:37,82:38,83:$Vu,84:42,85:43,88:$Vv,95:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},{12:$Vi,13:$Vj,18:63,49:$Vk,54:39,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,70:[1,62],79:35,80:36,81:37,82:38,83:$Vu,84:42,85:43,88:$Vv,95:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},{12:[1,64]},{14:[1,66],19:67,20:65,73:$V2,74:$V3,75:$V4,76:$V5,77:$V6,78:$V7},o($VC,[2,72]),o($VC,[2,73]),{67:[1,68]},{13:[1,69]},o($VC,[2,69],{66:$VD,67:$VE,87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,96:$VN,97:$VO,98:$VP,99:$VQ,100:$VR}),o($VS,[2,82]),o($VS,[2,83]),o($VS,[2,84]),o($VS,[2,85]),o($VS,[2,86]),{12:$Vi,13:$Vj,18:86,19:85,49:$Vk,54:39,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,73:$V2,74:$V3,75:$V4,76:$V5,77:$V6,78:$V7,79:35,80:36,81:37,82:38,83:$Vu,84:42,85:43,88:$Vv,95:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},{19:88,65:[1,87],73:$V2,74:$V3,75:$V4,76:$V5,77:$V6,78:$V7},o($VS,[2,90]),o($VS,[2,91]),o($VS,[2,92],{13:[1,91],69:[1,92],71:[1,89],72:[1,90]}),{12:$Vi,13:$Vj,18:93,49:$Vk,54:39,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,79:35,80:36,81:37,82:38,83:$Vu,84:42,85:43,88:$Vv,95:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},{12:$Vi,13:$Vj,18:94,49:$Vk,54:39,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,79:35,80:36,81:37,82:38,83:$Vu,84:42,85:43,88:$Vv,95:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},{13:[1,95]},{13:[1,96]},{13:[1,97]},{13:[1,98]},{13:[1,99]},{13:[1,100]},{13:[1,101]},{13:[1,102]},{13:[1,103]},{85:105,86:104,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},o($VT,[2,117]),o($VT,[2,118]),o($VT,[2,119]),o($VT,[2,120]),o($VT,[2,121]),{68:[1,106]},{66:$VD,67:$VE,70:[1,107],87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,96:$VN,97:$VO,98:$VP,99:$VQ,100:$VR},o($Vd,[2,74]),{14:[1,108],17:[1,109]},{21:110,49:$VU},{12:[1,112]},{12:$VV,24:113,64:114},{12:$Vi,13:$Vj,14:[1,116],16:117,18:118,49:$Vk,54:39,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,79:35,80:36,81:37,82:38,83:$Vu,84:42,85:43,88:$Vv,95:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},{12:$Vi,13:$Vj,18:119,49:$Vk,54:39,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,79:35,80:36,81:37,82:38,83:$Vu,84:42,85:43,88:$Vv,95:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},{12:$Vi,13:$Vj,18:120,49:$Vk,54:39,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,79:35,80:36,81:37,82:38,83:$Vu,84:42,85:43,88:$Vv,95:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},{12:$Vi,13:$Vj,18:121,49:$Vk,54:39,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,79:35,80:36,81:37,82:38,83:$Vu,84:42,85:43,88:$Vv,95:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},{12:$Vi,13:$Vj,18:122,49:$Vk,54:39,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,79:35,80:36,81:37,82:38,83:$Vu,84:42,85:43,88:$Vv,95:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},{12:$Vi,13:$Vj,18:123,49:$Vk,54:39,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,79:35,80:36,81:37,82:38,83:$Vu,84:42,85:43,88:$Vv,95:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},{12:$Vi,13:$Vj,18:124,49:$Vk,54:39,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,79:35,80:36,81:37,82:38,83:$Vu,84:42,85:43,88:$Vv,95:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},{12:$Vi,13:$Vj,18:125,49:$Vk,54:39,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,79:35,80:36,81:37,82:38,83:$Vu,84:42,85:43,88:$Vv,95:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},{12:$Vi,13:$Vj,18:126,49:$Vk,54:39,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,79:35,80:36,81:37,82:38,83:$Vu,84:42,85:43,88:$Vv,95:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},{12:$Vi,13:$Vj,18:127,49:$Vk,54:39,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,79:35,80:36,81:37,82:38,83:$Vu,84:42,85:43,88:$Vv,95:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},{12:$Vi,13:$Vj,18:128,49:$Vk,54:39,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,79:35,80:36,81:37,82:38,83:$Vu,84:42,85:43,88:$Vv,95:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},{12:$Vi,13:$Vj,18:129,49:$Vk,54:39,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,79:35,80:36,81:37,82:38,83:$Vu,84:42,85:43,88:$Vv,95:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},{12:$Vi,13:$Vj,18:130,49:$Vk,54:39,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,79:35,80:36,81:37,82:38,83:$Vu,84:42,85:43,88:$Vv,95:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},{12:$Vi,13:$Vj,18:131,49:$Vk,54:39,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,79:35,80:36,81:37,82:38,83:$Vu,84:42,85:43,88:$Vv,95:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},{12:$Vi,13:$Vj,18:132,49:$Vk,54:39,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,79:35,80:36,81:37,82:38,83:$Vu,84:42,85:43,88:$Vv,95:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},{12:$Vi,13:$Vj,18:133,49:$Vk,54:39,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,79:35,80:36,81:37,82:38,83:$Vu,84:42,85:43,88:$Vv,95:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},{14:[1,134]},{14:[1,135],66:$VD,67:$VE,87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,96:$VN,97:$VO,98:$VP,99:$VQ,100:$VR},{66:[1,136]},{69:[1,137]},o($VS,[2,93]),o($VS,[2,94]),{12:$Vi,13:$Vj,14:[1,139],16:138,18:118,49:$Vk,54:39,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,79:35,80:36,81:37,82:38,83:$Vu,84:42,85:43,88:$Vv,95:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},{12:$Vi,13:$Vj,18:140,49:$Vk,54:39,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,79:35,80:36,81:37,82:38,83:$Vu,84:42,85:43,88:$Vv,95:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},o($VW,[2,104],{66:$VD,67:$VE,92:$VK,93:$VL,94:$VM,96:$VN,97:$VO,98:$VP,99:$VQ,100:$VR}),o($VX,[2,107],{92:$VK,93:$VL,94:$VM}),{12:[1,141]},{12:$Vi,13:$Vj,16:142,18:118,49:$Vk,54:39,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,79:35,80:36,81:37,82:38,83:$Vu,84:42,85:43,88:$Vv,95:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},{12:$Vi,13:$Vj,16:143,18:118,49:$Vk,54:39,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,79:35,80:36,81:37,82:38,83:$Vu,84:42,85:43,88:$Vv,95:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},{12:$Vi,13:$Vj,16:144,18:118,49:$Vk,54:39,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,79:35,80:36,81:37,82:38,83:$Vu,84:42,85:43,88:$Vv,95:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},{12:$Vi,13:$Vj,16:145,18:118,49:$Vk,54:39,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,79:35,80:36,81:37,82:38,83:$Vu,84:42,85:43,88:$Vv,95:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},{12:$Vi,13:$Vj,16:146,18:118,49:$Vk,54:39,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,79:35,80:36,81:37,82:38,83:$Vu,84:42,85:43,88:$Vv,95:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},{12:$Vi,13:$Vj,16:147,18:118,49:$Vk,54:39,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,79:35,80:36,81:37,82:38,83:$Vu,84:42,85:43,88:$Vv,95:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},{12:$Vi,13:$Vj,16:148,18:118,49:$Vk,54:39,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,79:35,80:36,81:37,82:38,83:$Vu,84:42,85:43,88:$Vv,95:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},{12:$Vi,13:$Vj,16:149,18:118,49:$Vk,54:39,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,79:35,80:36,81:37,82:38,83:$Vu,84:42,85:43,88:$Vv,95:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},{17:[1,151],50:[1,150]},o($VY,[2,116]),{12:$Vi,13:$Vj,18:152,49:$Vk,54:39,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,79:35,80:36,81:37,82:38,83:$Vu,84:42,85:43,88:$Vv,95:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},{68:[1,153]},{21:154,49:$VU},{19:155,73:$V2,74:$V3,75:$V4,76:$V5,77:$V6,78:$V7},o($V8,[2,13]),{7:159,12:$VZ,19:164,22:157,23:158,24:160,25:161,26:162,27:163,28:$V_,29:$V$,30:$V01,31:170,32:171,33:172,34:173,35:174,36:$V11,39:$V21,46:$V31,47:$V41,48:$V51,50:[1,156],51:$V61,52:$V71,53:$V81,64:165,65:$V1,73:$V2,74:$V3,75:$V4,76:$V5,77:$V6,78:$V7},o($V91,[2,15]),{15:[1,183]},{15:[1,184],17:$Va,68:$Vb,69:$Vc},o($Vd,$Ve,{71:$Vf,72:$Vg}),{15:[1,185]},{14:[1,186],17:$Va1},o($V91,[2,11],{66:$VD,67:$VE,87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,96:$VN,97:$VO,98:$VP,99:$VQ,100:$VR}),o($VW,[2,98],{66:$VD,67:$VE,92:$VK,93:$VL,94:$VM,96:$VN,97:$VO,98:$VP,99:$VQ,100:$VR}),o($VW,[2,99],{66:$VD,67:$VE,92:$VK,93:$VL,94:$VM,96:$VN,97:$VO,98:$VP,99:$VQ,100:$VR}),o($Vb1,[2,100],{66:$VD,67:$VE,87:$VF,88:$VG,92:$VK,93:$VL,94:$VM,96:$VN,97:$VO,98:$VP,99:$VQ,100:$VR}),o($Vb1,[2,101],{66:$VD,67:$VE,87:$VF,88:$VG,92:$VK,93:$VL,94:$VM,96:$VN,97:$VO,98:$VP,99:$VQ,100:$VR}),o($Vc1,[2,102],{66:$VD,67:$VE,87:$VF,88:$VG,89:$VH,90:$VI,92:$VK,93:$VL,94:$VM,96:$VN,97:$VO,98:$VP,99:$VQ,100:$VR}),o($VS,[2,103]),o([14,15,17,43,66,67,70,87,88,89,90,91,93,96,97,98,99,100],[2,105],{92:$VK,94:$VM}),o([14,15,17,43,66,67,70,87,88,89,90,91,93,94,96,97,98,99,100],[2,106],{92:$VK}),o($VX,[2,108],{92:$VK,93:$VL,94:$VM}),o($VX,[2,109],{92:$VK,93:$VL,94:$VM}),o($VX,[2,110],{92:$VK,93:$VL,94:$VM}),o($VX,[2,111],{92:$VK,93:$VL,94:$VM}),o($VX,[2,112],{92:$VK,93:$VL,94:$VM}),o($VX,[2,113],{92:$VK,93:$VL,94:$VM}),{43:[1,188],66:$VD,67:$VE,87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,96:$VN,97:$VO,98:$VP,99:$VQ,100:$VR},{12:$Vi,13:$Vj,18:189,49:$Vk,54:39,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,79:35,80:36,81:37,82:38,83:$Vu,84:42,85:43,88:$Vv,95:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},o($VS,[2,88]),{19:190,73:$V2,74:$V3,75:$V4,76:$V5,77:$V6,78:$V7},{12:$Vi,13:$Vj,18:191,49:$Vk,54:39,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,79:35,80:36,81:37,82:38,83:$Vu,84:42,85:43,88:$Vv,95:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},{14:[1,192],17:$Va1},o($VS,[2,64]),{66:$VD,67:$VE,70:[1,193],87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,96:$VN,97:$VO,98:$VP,99:$VQ,100:$VR},{17:[1,194]},{14:[1,195],17:$Va1},{14:[1,196],17:$Va1},{14:[1,197],17:$Va1},{14:[1,198],17:$Va1},{14:[1,199],17:$Va1},{14:[1,200],17:$Va1},{14:[1,201],17:$Va1},{14:[1,202],17:$Va1},o($VS,[2,95]),{85:203,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},o($VC,[2,70],{66:$VD,67:$VE,87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,96:$VN,97:$VO,98:$VP,99:$VQ,100:$VR}),{12:$Vi,13:$Vj,18:204,49:$Vk,54:39,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,79:35,80:36,81:37,82:38,83:$Vu,84:42,85:43,88:$Vv,95:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},o($V8,[2,12]),{12:[1,205]},o($Vd1,[2,47]),{7:159,12:$VZ,19:164,23:207,24:160,25:161,26:162,27:163,28:$V_,29:$V$,30:$V01,31:170,32:171,33:172,34:173,35:174,36:$V11,39:$V21,46:$V31,47:$V41,48:$V51,50:[1,206],51:$V61,52:$V71,53:$V81,64:165,65:$V1,73:$V2,74:$V3,75:$V4,76:$V5,77:$V6,78:$V7},o($Ve1,[2,17]),o($Ve1,[2,18]),{15:[1,208]},{15:[1,209]},o($Ve1,[2,21]),{15:[1,210]},{12:$VV,24:19,64:20},{17:$Va,68:$Vb,69:$Vc},o([17,68,69],$Ve,{13:[1,211],71:$Vf,72:$Vg}),{13:[1,212]},{13:[1,213]},{13:[1,214]},o($Ve1,[2,27]),o($Ve1,[2,28]),o($Ve1,[2,29]),o($Ve1,[2,30]),o($Ve1,[2,31]),{15:[2,23]},{12:$Vi,13:$Vj,15:[2,25],18:215,49:$Vk,54:39,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,79:35,80:36,81:37,82:38,83:$Vu,84:42,85:43,88:$Vv,95:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},{15:[2,26]},{13:[1,216]},{13:[1,217]},{13:[1,218]},{13:[1,219]},{21:220,49:$VU},o($Vh,[2,67]),o($Vh,[2,68]),o($V8,[2,8]),{15:[1,221]},{12:$Vi,13:$Vj,18:222,49:$Vk,54:39,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,79:35,80:36,81:37,82:38,83:$Vu,84:42,85:43,88:$Vv,95:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},{12:$Vi,13:$Vj,18:223,49:$Vk,54:39,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,79:35,80:36,81:37,82:38,83:$Vu,84:42,85:43,88:$Vv,95:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},o($Vc1,[2,87],{66:$VD,67:$VE,87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,96:$VN,97:$VO,98:$VP,99:$VQ,100:$VR}),{67:[1,224]},{66:$VD,67:$VE,70:[1,225],87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,96:$VN,97:$VO,98:$VP,99:$VQ,100:$VR},o($VS,[2,63]),o($VS,[2,97]),{12:$Vi,13:$Vj,16:226,18:118,49:$Vk,54:39,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,79:35,80:36,81:37,82:38,83:$Vu,84:42,85:43,88:$Vv,95:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},o($VS,[2,55]),o($VS,[2,56]),o($VS,[2,57]),o($VS,[2,58]),o($VS,[2,59]),o($VS,[2,60]),o($VS,[2,61]),o($VS,[2,62]),o($VY,[2,115]),o($VC,[2,71],{66:$VD,67:$VE,87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,96:$VN,97:$VO,98:$VP,99:$VQ,100:$VR}),o($V91,[2,14]),o($Vd1,[2,48]),o($Ve1,[2,16]),o($Ve1,[2,19]),o($Ve1,[2,20]),o($Ve1,[2,22]),{12:$Vi,13:$Vj,14:[1,228],16:227,18:118,49:$Vk,54:39,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,79:35,80:36,81:37,82:38,83:$Vu,84:42,85:43,88:$Vv,95:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},{12:[1,229]},{12:[1,230]},{12:$Vi,13:$Vj,16:231,18:118,49:$Vk,54:39,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,79:35,80:36,81:37,82:38,83:$Vu,84:42,85:43,88:$Vv,95:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},{15:[2,24],66:$VD,67:$VE,87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,96:$VN,97:$VO,98:$VP,99:$VQ,100:$VR},{12:$Vi,13:$Vj,18:232,49:$Vk,54:39,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,79:35,80:36,81:37,82:38,83:$Vu,84:42,85:43,88:$Vv,95:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},{12:$Vi,13:$Vj,18:233,49:$Vk,54:39,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,79:35,80:36,81:37,82:38,83:$Vu,84:42,85:43,88:$Vv,95:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},{12:$Vi,13:$Vj,18:234,49:$Vk,54:39,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,79:35,80:36,81:37,82:38,83:$Vu,84:42,85:43,88:$Vv,95:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},{7:235,12:$VV,19:164,24:236,64:165,65:$V1,73:$V2,74:$V3,75:$V4,76:$V5,77:$V6,78:$V7},{46:[1,237]},o($V8,[2,9]),o($V91,[2,10],{66:$VD,67:$VE,87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,96:$VN,97:$VO,98:$VP,99:$VQ,100:$VR}),o([14,15,17,43,70,87,88,89,90,91,100],[2,114],{66:$VD,67:$VE,92:$VK,93:$VL,94:$VM,96:$VN,97:$VO,98:$VP,99:$VQ}),o($VS,[2,89]),o($VS,[2,96]),{14:[1,238],17:$Va1},{14:[1,239],17:$Va1},{15:[2,53]},{17:[1,240]},{17:[1,241]},{14:[1,242],17:$Va1},{14:[1,243],66:$VD,67:$VE,87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,96:$VN,97:$VO,98:$VP,99:$VQ,100:$VR},{14:[1,244],66:$VD,67:$VE,87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,96:$VN,97:$VO,98:$VP,99:$VQ,100:$VR},{14:[1,245],66:$VD,67:$VE,87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,96:$VN,97:$VO,98:$VP,99:$VQ,100:$VR},{12:$Vi,13:$Vj,18:246,49:$Vk,54:39,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,79:35,80:36,81:37,82:38,83:$Vu,84:42,85:43,88:$Vv,95:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},{15:[1,247]},{13:[1,248]},o($VS,[2,54]),{15:[2,52]},{12:$Vi,13:$Vj,18:249,49:$Vk,54:39,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,79:35,80:36,81:37,82:38,83:$Vu,84:42,85:43,88:$Vv,95:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},{12:$Vi,13:$Vj,16:250,18:118,49:$Vk,54:39,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,79:35,80:36,81:37,82:38,83:$Vu,84:42,85:43,88:$Vv,95:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},{15:[2,51]},{21:251,49:$VU},{40:252,49:[1,253]},{21:254,49:$VU},{15:[1,255],66:$VD,67:$VE,87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,96:$VN,97:$VO,98:$VP,99:$VQ,100:$VR},{12:$Vi,13:$Vj,18:256,49:$Vk,54:39,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,79:35,80:36,81:37,82:38,83:$Vu,84:42,85:43,88:$Vv,95:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},{12:$Vi,13:$Vj,18:257,49:$Vk,54:39,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,79:35,80:36,81:37,82:38,83:$Vu,84:42,85:43,88:$Vv,95:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},{14:[1,258],66:$VD,67:$VE,87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,96:$VN,97:$VO,98:$VP,99:$VQ,100:$VR},{14:[1,259],17:$Va1},o($Ve1,[2,35],{37:260,38:[1,261]}),o($Ve1,[2,36]),{41:262,42:[1,264],44:263,45:$Vf1},o($Ve1,[2,40]),{12:$VV,24:266,64:165},{15:[1,267],66:$VD,67:$VE,87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,96:$VN,97:$VO,98:$VP,99:$VQ,100:$VR},{14:[1,268],66:$VD,67:$VE,87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,96:$VN,97:$VO,98:$VP,99:$VQ,100:$VR},{15:[2,49]},{15:[2,50]},o($Ve1,[2,32]),{21:269,31:270,36:$V11,49:$VU},{42:[1,273],44:271,45:$Vf1,50:[1,272]},{50:[1,274]},{12:$Vi,13:$Vj,18:275,49:$Vk,54:39,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,79:35,80:36,81:37,82:38,83:$Vu,84:42,85:43,88:$Vv,95:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},{43:[1,276]},{14:[1,277]},{12:$VV,24:278,64:165},{15:[1,279]},o($Ve1,[2,33]),o($Ve1,[2,34]),{50:[1,280]},o($Ve1,[2,45]),{12:$Vi,13:$Vj,18:281,49:$Vk,54:39,55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,79:35,80:36,81:37,82:38,83:$Vu,84:42,85:43,88:$Vv,95:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA,105:$VB},o($Ve1,[2,46]),{43:[1,282],66:$VD,67:$VE,87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,96:$VN,97:$VO,98:$VP,99:$VQ,100:$VR},{7:159,12:$VZ,19:164,22:283,23:158,24:160,25:161,26:162,27:163,28:$V_,29:$V$,30:$V01,31:170,32:171,33:172,34:173,35:174,36:$V11,39:$V21,46:$V31,47:$V41,48:$V51,51:$V61,52:$V71,53:$V81,64:165,65:$V1,73:$V2,74:$V3,75:$V4,76:$V5,77:$V6,78:$V7},{21:284,49:$VU},{14:[1,285]},o($Ve1,[2,43]),o($Ve1,[2,44]),{43:[1,286],66:$VD,67:$VE,87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,96:$VN,97:$VO,98:$VP,99:$VQ,100:$VR},{7:159,12:$VZ,19:164,22:287,23:158,24:160,25:161,26:162,27:163,28:$V_,29:$V$,30:$V01,31:170,32:171,33:172,34:173,35:174,36:$V11,39:$V21,46:$V31,47:$V41,48:$V51,51:$V61,52:$V71,53:$V81,64:165,65:$V1,73:$V2,74:$V3,75:$V4,76:$V5,77:$V6,78:$V7},{7:159,12:$VZ,19:164,23:207,24:160,25:161,26:162,27:163,28:$V_,29:$V$,30:$V01,31:170,32:171,33:172,34:173,35:174,36:$V11,39:$V21,46:$V31,47:$V41,48:$V51,50:[2,39],51:$V61,52:$V71,53:$V81,64:165,65:$V1,73:$V2,74:$V3,75:$V4,76:$V5,77:$V6,78:$V7},o($Ve1,[2,41]),{21:288,49:$VU},{7:159,12:$VZ,19:164,22:289,23:158,24:160,25:161,26:162,27:163,28:$V_,29:$V$,30:$V01,31:170,32:171,33:172,34:173,35:174,36:$V11,39:$V21,46:$V31,47:$V41,48:$V51,51:$V61,52:$V71,53:$V81,64:165,65:$V1,73:$V2,74:$V3,75:$V4,76:$V5,77:$V6,78:$V7},o($Vg1,[2,38],{7:159,24:160,25:161,26:162,27:163,19:164,64:165,31:170,32:171,33:172,34:173,35:174,23:207,12:$VZ,28:$V_,29:$V$,30:$V01,36:$V11,39:$V21,46:$V31,47:$V41,48:$V51,51:$V61,52:$V71,53:$V81,65:$V1,73:$V2,74:$V3,75:$V4,76:$V5,77:$V6,78:$V7}),o($Ve1,[2,42]),o($Vg1,[2,37],{7:159,24:160,25:161,26:162,27:163,19:164,64:165,31:170,32:171,33:172,34:173,35:174,23:207,12:$VZ,28:$V_,29:$V$,30:$V01,36:$V11,39:$V21,46:$V31,47:$V41,48:$V51,51:$V61,52:$V71,53:$V81,65:$V1,73:$V2,74:$V3,75:$V4,76:$V5,77:$V6,78:$V7})],
defaultActions: {17:[2,1],175:[2,23],177:[2,26],228:[2,53],239:[2,52],242:[2,51],258:[2,49],259:[2,50]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const { Literal } = require('../modelos/Expresiones/Literal');
    const { Arithmetic, ArithmeticOption } = require('../modelos/Expresiones/Arithmetic');
    const { Relational, RelationalOption } = require('../modelos/Expresiones/Relational');
    const { Logic, LogicOption } = require('../modelos/Expresiones/Logic');
    const { Ternary } = require('../modelos/Expresiones/Ternary');
    const { AccesArray } = require('../modelos/Expresiones/AccesArray');
    const { NewArray } = require('../modelos/Expresiones/NewArray');
    const { NewCleanArray } = require('../modelos/Expresiones/NewCleanArray');
    const { NewList } = require('../modelos/Expresiones/NewList');
    const { MiArray } = require('../modelos/Symbol/Array');
    const { List } = require('../modelos/Symbol/List');
    const { Access } = require('../modelos/Expresiones/Access');
    const { Params } = require('../modelos/Expresiones/Params');
    const { Casting } = require('../modelos/Expresiones/Casting');
    const { ArithmeticAccess } = require('../modelos/Expresiones/ArithmeticAccess');
    const { ArithmeticAccess2 } = require('../modelos/Expresiones/ArithmeticAccess2');
    const { ArithmeticAccessI } = require('../modelos/Instrucciones/ArithmeticAccessI');
    const { ArithmeticAccessI2 } = require('../modelos/Instrucciones/ArithmeticAccessI2');
    const { CallExp, TypeCallExp } = require('../modelos/Expresiones/CallExp');
    const { Call, TypeCall } = require('../modelos/Instrucciones/Call');
    const { Declaration } = require('../modelos/Instrucciones/Declaration');
    const { Function } = require('../modelos/Instrucciones/Function');
    const { Statement } = require('../modelos/Instrucciones/Statement');
    const { Assigment } = require('../modelos/Instrucciones/Assigment');
    const { AccessArrayAssigment } = require('../modelos/Instrucciones/AccessArrayAssigment');
    const { Break } = require('../modelos/Instrucciones/Break');
    const { Continue } = require('../modelos/Instrucciones/Continue');
    const { Return } = require('../modelos/Instrucciones/Return');
    const { If } = require('../modelos/Instrucciones/If');
    const { While } = require('../modelos/Instrucciones/While');
    const { DoWhile } = require('../modelos/Instrucciones/DoWhile');
    const { Case} = require('../modelos/Instrucciones/Case');
    const { Switch } = require('../modelos/Instrucciones/Switch');
    const { For } = require('../modelos/Instrucciones/For');
    const { errores } = require('../modelos/Errores/ErrorList'); 
    const { MiError, TypeError} = require('../modelos/Errores/Error');
    console.log("SE COMPILO EL ARCHIVO .JISON");
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 83
break;
case 4:return 65
break;
case 5:return 51
break;
case 6:return 55
break;
case 7:return 52
break;
case 8:return 36
break;
case 9:return 38
break;
case 10:return 39
break;
case 11:return 42
break;
case 12:return 45
break;
case 13:return 46
break;
case 14:return 47
break;
case 15:return 48
break;
case 16:return 28
break;
case 17:return 30
break;
case 18:return 29
break;
case 19:return 78
break;
case 20:return 10
break;
case 21:return 11
break;
case 22:return 53 
break;
case 23:return 56
break;
case 24:return 57
break;
case 25:return 58
break;
case 26:return 59
break;
case 27:return 60 
break;
case 28:return 61
break;
case 29:return 62
break;
case 30:return 63
break;
case 31:return 76
break;
case 32:return 74
break;
case 33:return 75
break;
case 34:return 77
break;
case 35:return 73 
break;
case 36:return 71
break;
case 37:return 72
break;
case 38:return 87
break;
case 39:return 88
break;
case 40:return 90
break;
case 41:return 89
break;
case 42:return 91
break;
case 43:return 92
break;
case 44:return 98
break;
case 45:return 99
break;
case 46:return 96
break;
case 47:return 97
break;
case 48:return 66
break;
case 49:return 67
break;
case 50:return 68
break;
case 51:return 94
break;
case 52:return 93
break;
case 53:return 95
break;
case 54:return 43
break;
case 55:return 100
break;
case 56:return 15
break;
case 57:return 17
break;
case 58:return 68
break;
case 59:return 13
break;
case 60:return 14 
break;
case 61:return 49
break;
case 62:return 50
break;
case 63:return 69
break;
case 64:return 70
break;
case 65:return 104
break;
case 66:return 102
break;
case 67:return 101
break;
case 68:return 103
break;
case 69:return 105
break;
case 70:return 12
break;
case 71:return 5
break;
case 72:errores.push(new MiError(yy_.yylloc.first_line, yy_.yylloc.first_column ,TypeError.LEXICO ,"ERROR LEXICO EN"+yy_.yytext));
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:new\b)/i,/^(?:DynamicList\b)/i,/^(?:append\b)/i,/^(?:getValue\b)/i,/^(?:setValue\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:start\b)/i,/^(?:with\b)/i,/^(?:WriteLine\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:toCharArray\b)/i,/^(?:string\b)/i,/^(?:char\b)/i,/^(?:int\b)/i,/^(?:boolean\b)/i,/^(?:double\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:ˆ)/i,/^(?:%)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?::)/i,/^(?:\?)/i,/^(?:;)/i,/^(?:,)/i,/^(?:=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:([\']([\\].|[^\'\n])[\']))/i,/^(?:(([0-9]+)\.([0-9]+)))/i,/^(?:([0-9]+))/i,/^(?:(true|false\b))/i,/^(?:([\"]([\\][\"]|[^\"])*[\"]))/i,/^(?:((([a-zA-ZÑñ]+)|(_([a-zA-ZÑñ]+))|(([a-zA-ZÑñ]+)_))(([a-zA-ZÑñ]+)|([0-9]+)|_)*))/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}